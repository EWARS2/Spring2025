------- FILE C:\Users\EWARS_2\Desktop\BestWestern\a.bas.asm LEVEL 1 PASS 3
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE C:\Users\EWARS_2\Desktop\BestWestern\a.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE C:\Users\EWARS_2\Desktop\BestWestern\a.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; VCS.H
      4  10000 ????						; Version 1.05, 13/November/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_VCS =	105
      7  10000 ????
      8  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines hardware registers and memory mapping for the
     13  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  10000 ????						; with your views.  Please contribute, if you think you can improve this
     21  10000 ????						; file!
     22  10000 ????						;
     23  10000 ????						; Latest Revisions...
     24  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  10000 ????						;			    This will allow conditional code to verify VCS.H being
     27  10000 ????						;			    used for code assembly.
     28  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  10000 ????						;			 readability issue, and binary compatibility with disassembled
     32  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  10000 ????						;			 which was broken by the use of segments in this file, as
     35  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  10000 ????						;						   it is safe to leave it undefined, and the base address will
     40  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  10000 ????						;			  - register definitions are now generated through assignment
     43  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  10000 ????						;			    address architecture.
     45  10000 ????						; 1.0	22/MAR/2003		Initial release
     46  10000 ????
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????
     50  10000 ????						; TIA_BASE_ADDRESS
     51  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  10000 ????						; Normally 0, the base address should (externally, before including this file)
     53  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  10000 ????						; < $40 as a bankswitch.
     56  10000 ????
     57  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     58  10000 ????			   -TIA_BASE_ADDRESS =	0
     59  10000 ????				       ENDIF
     60  10000 ????
     61  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  10000 ????						; *OR* by declaring the label before including this file, eg:
     64  10000 ????						; TIA_BASE_ADDRESS = $40
     65  10000 ????						;   include "vcs.h"
     66  10000 ????
     67  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  10000 ????						; for the mirrored ROM hardware registers.
     70  10000 ????
     71  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  10000 ????
     75  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     76  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  10000 ????				       ENDIF
     78  10000 ????
     79  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  10000 ????				       ENDIF
     82  10000 ????
     83  10000 ????						;-------------------------------------------------------------------------------
     84  10000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  10000 ????				       SEG
    201  10000 ????
    202  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  10000 ????
      3  10000 ????						; MACRO.H
      4  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  10000 ????
      6  10000 ????		00 69	    VERSION_MACRO =	105
      7  10000 ????
      8  10000 ????						;
      9  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  10000 ????						;
     12  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  10000 ????						; It is distributed as a companion machine-specific support package
     14  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  10000 ????						; available at at http://www.atari2600.org/dasm
     16  10000 ????						;
     17  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  10000 ????						; contents, or would like to add something, please write to me
     19  10000 ????						; (atari2600@taswegian.com) with your contribution.
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						;
     23  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  10000 ????						;
     28  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  10000 ????						;
     30  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  10000 ????						;			   (standardised macro for vertical synch code)
     32  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  10000 ????						; 1.0	22/MAR/2003		Initial release
     35  10000 ????
     36  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  10000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  10000 ????						;   registers and require them to be defined first).
     41  10000 ????
     42  10000 ????						; Available macros...
     43  10000 ????						;   SLEEP n		 - sleep for n cycles
     44  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  10000 ????
     48  10000 ????						;-------------------------------------------------------------------------------
     49  10000 ????						; SLEEP duration
     50  10000 ????						; Original author: Thomas Jentzsch
     51  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  10000 ????						; useful for code where precise timing is required.
     53  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  10000 ????
     57  10000 ????				       MAC	sleep
     58  10000 ????			    .CYCLES    SET	{1}
     59  10000 ????
     60  10000 ????				       IF	.CYCLES < 2
     61  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  10000 ????				       ERR
     63  10000 ????				       ENDIF
     64  10000 ????
     65  10000 ????				       IF	.CYCLES & 1
     66  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     67  10000 ????				       nop	0
     68  10000 ????				       ELSE
     69  10000 ????				       bit	VSYNC
     70  10000 ????				       ENDIF
     71  10000 ????			    .CYCLES    SET	.CYCLES - 3
     72  10000 ????				       ENDIF
     73  10000 ????
     74  10000 ????				       REPEAT	.CYCLES / 2
     75  10000 ????				       nop
     76  10000 ????				       REPEND
     77  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     78  10000 ????
     79  10000 ????						;-------------------------------------------------------------------------------
     80  10000 ????						; VERTICAL_SYNC
     81  10000 ????						; Original author: Manuel Polik
     82  10000 ????						; Inserts the code required for a proper 3 scannline 
     83  10000 ????						; vertical sync sequence
     84  10000 ????						;
     85  10000 ????						; Note: Alters the accumulator
     86  10000 ????						;
     87  10000 ????						; IN:
     88  10000 ????						; OUT: A = 1
     89  10000 ????
     90  10000 ????				       MAC	vertical_sync
     91  10000 ????				       LDA	#$02	; A = VSYNC enable
     92  10000 ????				       STA	WSYNC	; Finish current line
     93  10000 ????				       STA	VSYNC	; Start vertical sync
     94  10000 ????				       STA	WSYNC	; 1st line vertical sync
     95  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     96  10000 ????				       LSR		; A = VSYNC disable
     97  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     98  10000 ????				       STA	VSYNC	; Stop vertical sync
     99  10000 ????				       ENDM
    100  10000 ????
    101  10000 ????						;-------------------------------------------------------------------------------
    102  10000 ????						; CLEAN_START
    103  10000 ????						; Original author: Andrew Davie
    104  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  10000 ????						; Use as very first section of code on boot (ie: at reset)
    108  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  10000 ????
    110  10000 ????				       MAC	clean_start
    111  10000 ????				       sei
    112  10000 ????				       cld
    113  10000 ????
    114  10000 ????				       ldx	#0
    115  10000 ????				       txa
    116  10000 ????				       tay
    117  10000 ????			    .CLEAR_STACK dex
    118  10000 ????				       txs
    119  10000 ????				       pha
    120  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  10000 ????
    122  10000 ????				       ENDM
    123  10000 ????
    124  10000 ????						;-------------------------------------------------------
    125  10000 ????						; SET_POINTER
    126  10000 ????						; Original author: Manuel Rotschkar
    127  10000 ????						;
    128  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  10000 ????						;
    130  10000 ????						; Usage: SET_POINTER pointer, address
    131  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  10000 ????						;
    133  10000 ????						; Note: Alters the accumulator, NZ flags
    134  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  10000 ????						; IN 2: absolute address
    136  10000 ????
    137  10000 ????				       MAC	set_pointer
    138  10000 ????			    .POINTER   SET	{1}
    139  10000 ????			    .ADDRESS   SET	{2}
    140  10000 ????
    141  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  10000 ????				       STA	.POINTER	; Store in pointer
    143  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    144  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    145  10000 ????
    146  10000 ????				       ENDM
    147  10000 ????
    148  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 ec	    _Bit7_Flip_P1 =	y
      4  10000 ????
      5  10000 ????		00 d9	    _checkpointCount =	f
      6  10000 ????
      7  10000 ????		00 d8	    _speed     =	e
      8  10000 ????
      9  10000 ????		00 d7	    _scoreTemp =	d
     10  10000 ????
     11  10000 ????		00 d6	    _rng       =	c
     12  10000 ????
     13  10000 ????		00 d5	    _frameCounter =	b
     14  10000 ????
     15  10000 ????		00 d4	    _velocity  =	a
     16  10000 ????
     17  10000 ????		00 03	    pfres      =	3
     18  10000 ????
     19  10000 ????		00 01	    PFcolors   =	1
     20  10000 ????		00 01	    backgroundchange =	1
     21  10000 ????		00 01	    no_blank_lines =	1
------- FILE 2600basic.h
      7  10000 ????
      8  10000 ????		00 80	    player0x   =	$80
      9  10000 ????		00 81	    player1x   =	$81
     10  10000 ????		00 82	    missile0x  =	$82
     11  10000 ????		00 83	    missile1x  =	$83
     12  10000 ????		00 84	    ballx      =	$84
     13  10000 ????
     14  10000 ????		00 85	    objecty    =	$85
     15  10000 ????		00 85	    player0y   =	$85
     16  10000 ????		00 86	    player1y   =	$86
     17  10000 ????		00 87	    missile1height =	$87
     18  10000 ????		00 88	    missile1y  =	$88
     19  10000 ????		00 89	    bally      =	$89
     20  10000 ????
     21  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     22  10000 ????
     23  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     24  10000 ????		00 8a	    player0pointerlo =	$8A
     25  10000 ????		00 8b	    player0pointerhi =	$8B
     26  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     27  10000 ????		00 8c	    player1pointerlo =	$8C
     28  10000 ????		00 8d	    player1pointerhi =	$8D
     29  10000 ????
     30  10000 ????		00 8e	    player0height =	$8E
     31  10000 ????		00 8f	    player1height =	$8F
     32  10000 ????		00 90	    missile0height =	$90
     33  10000 ????		00 91	    missile0y  =	$91
     34  10000 ????		00 92	    ballheight =	$92
     35  10000 ????
     36  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     38  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     39  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     40  10000 ????
     41  10000 ????		00 93	    score      =	$93	; $93-$95
     42  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     43  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     45  10000 ????		00 9e	    temp3      =	$9E
     46  10000 ????		00 9f	    temp4      =	$9F
     47  10000 ????		00 a0	    temp5      =	$A0
     48  10000 ????		00 a1	    temp6      =	$A1
     49  10000 ????
     50  10000 ????		00 a2	    rand       =	$A2
     51  10000 ????		00 a3	    scorecolor =	$A3
     52  10000 ????
     53  10000 ????		00 a4	    var0       =	$A4
     54  10000 ????		00 a5	    var1       =	$A5
     55  10000 ????		00 a6	    var2       =	$A6
     56  10000 ????		00 a7	    var3       =	$A7
     57  10000 ????		00 a8	    var4       =	$A8
     58  10000 ????		00 a9	    var5       =	$A9
     59  10000 ????		00 aa	    var6       =	$AA
     60  10000 ????		00 ab	    var7       =	$AB
     61  10000 ????		00 ac	    var8       =	$AC
     62  10000 ????		00 ad	    var9       =	$AD
     63  10000 ????		00 ae	    var10      =	$AE
     64  10000 ????		00 af	    var11      =	$AF
     65  10000 ????		00 b0	    var12      =	$B0
     66  10000 ????		00 b1	    var13      =	$B1
     67  10000 ????		00 b2	    var14      =	$B2
     68  10000 ????		00 b3	    var15      =	$B3
     69  10000 ????		00 b4	    var16      =	$B4
     70  10000 ????		00 b5	    var17      =	$B5
     71  10000 ????		00 b6	    var18      =	$B6
     72  10000 ????		00 b7	    var19      =	$B7
     73  10000 ????		00 b8	    var20      =	$B8
     74  10000 ????		00 b9	    var21      =	$B9
     75  10000 ????		00 ba	    var22      =	$BA
     76  10000 ????		00 bb	    var23      =	$BB
     77  10000 ????		00 bc	    var24      =	$BC
     78  10000 ????		00 bd	    var25      =	$BD
     79  10000 ????		00 be	    var26      =	$BE
     80  10000 ????		00 bf	    var27      =	$BF
     81  10000 ????		00 c0	    var28      =	$C0
     82  10000 ????		00 c1	    var29      =	$C1
     83  10000 ????		00 c2	    var30      =	$C2
     84  10000 ????		00 c3	    var31      =	$C3
     85  10000 ????		00 c4	    var32      =	$C4
     86  10000 ????		00 c5	    var33      =	$C5
     87  10000 ????		00 c6	    var34      =	$C6
     88  10000 ????		00 c7	    var35      =	$C7
     89  10000 ????		00 c8	    var36      =	$C8
     90  10000 ????		00 c9	    var37      =	$C9
     91  10000 ????		00 ca	    var38      =	$CA
     92  10000 ????		00 cb	    var39      =	$CB
     93  10000 ????		00 cc	    var40      =	$CC
     94  10000 ????		00 cd	    var41      =	$CD
     95  10000 ????		00 ce	    var42      =	$CE
     96  10000 ????		00 cf	    var43      =	$CF
     97  10000 ????		00 d0	    var44      =	$D0
     98  10000 ????		00 d1	    var45      =	$D1
     99  10000 ????		00 d2	    var46      =	$D2
    100  10000 ????		00 d3	    var47      =	$D3
    101  10000 ????
    102  10000 ????		00 d4	    A	       =	$d4
    103  10000 ????		00 d4	    a	       =	$d4
    104  10000 ????		00 d5	    B	       =	$d5
    105  10000 ????		00 d5	    b	       =	$d5
    106  10000 ????		00 d6	    C	       =	$d6
    107  10000 ????		00 d6	    c	       =	$d6
    108  10000 ????		00 d7	    D	       =	$d7
    109  10000 ????		00 d7	    d	       =	$d7
    110  10000 ????		00 d8	    E	       =	$d8
    111  10000 ????		00 d8	    e	       =	$d8
    112  10000 ????		00 d9	    F	       =	$d9
    113  10000 ????		00 d9	    f	       =	$d9
    114  10000 ????		00 da	    G	       =	$da
    115  10000 ????		00 da	    g	       =	$da
    116  10000 ????		00 db	    H	       =	$db
    117  10000 ????		00 db	    h	       =	$db
    118  10000 ????		00 dc	    I	       =	$dc
    119  10000 ????		00 dc	    i	       =	$dc
    120  10000 ????		00 dd	    J	       =	$dd
    121  10000 ????		00 dd	    j	       =	$dd
    122  10000 ????		00 de	    K	       =	$de
    123  10000 ????		00 de	    k	       =	$de
    124  10000 ????		00 df	    L	       =	$df
    125  10000 ????		00 df	    l	       =	$df
    126  10000 ????		00 e0	    M	       =	$e0
    127  10000 ????		00 e0	    m	       =	$e0
    128  10000 ????		00 e1	    N	       =	$e1
    129  10000 ????		00 e1	    n	       =	$e1
    130  10000 ????		00 e2	    O	       =	$e2
    131  10000 ????		00 e2	    o	       =	$e2
    132  10000 ????		00 e3	    P	       =	$e3
    133  10000 ????		00 e3	    p	       =	$e3
    134  10000 ????		00 e4	    Q	       =	$e4
    135  10000 ????		00 e4	    q	       =	$e4
    136  10000 ????		00 e5	    R	       =	$e5
    137  10000 ????		00 e5	    r	       =	$e5
    138  10000 ????		00 e6	    S	       =	$e6
    139  10000 ????		00 e6	    s	       =	$e6
    140  10000 ????		00 e7	    T	       =	$e7
    141  10000 ????		00 e7	    t	       =	$e7
    142  10000 ????		00 e8	    U	       =	$e8
    143  10000 ????		00 e8	    u	       =	$e8
    144  10000 ????		00 e9	    V	       =	$e9
    145  10000 ????		00 e9	    v	       =	$e9
    146  10000 ????		00 ea	    W	       =	$ea
    147  10000 ????		00 ea	    w	       =	$ea
    148  10000 ????		00 eb	    X	       =	$eb
    149  10000 ????		00 eb	    x	       =	$eb
    150  10000 ????		00 ec	    Y	       =	$ec
    151  10000 ????		00 ec	    y	       =	$ec
    152  10000 ????		00 ed	    Z	       =	$ed
    153  10000 ????		00 ed	    z	       =	$ed
    154  10000 ????
    155  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    156  10000 ????		00 ef	    playfieldpos =	$ef
    157  10000 ????
    158  10000 ????						; available for other uses, or if unused, provide more stack space
    159  10000 ????
    160  10000 ????		00 f0	    aux1       =	$f0
    161  10000 ????		00 f1	    aux2       =	$f1
    162  10000 ????		00 f2	    aux3       =	$f2
    163  10000 ????		00 f3	    aux4       =	$f3
    164  10000 ????		00 f4	    aux5       =	$f4
    165  10000 ????		00 f5	    aux6       =	$f5
    166  10000 ????
    167  10000 ????						; playfield color/height pointers
    168  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    169  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    170  10000 ????						; the above pointers are the same because if color and height are both used together,
    171  10000 ????						; they must used absolute indexed and cannot use pointers
    172  10000 ????
    173  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    174  10000 ????						; upper 3 bits of $f2 contain the number of lives
    175  10000 ????		00 f4	    lifecolor  =	$f4
    176  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    177  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  10000 ????
    179  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    180  10000 ????		00 f3	    pfscore2   =	$f3
    181  10000 ????		00 f4	    pfscorecolor =	$f4
    182  10000 ????
    183  10000 ????		00 f6	    stack1     =	$f6
    184  10000 ????		00 f7	    stack2     =	$f7
    185  10000 ????		00 f8	    stack3     =	$f8
    186  10000 ????		00 f9	    stack4     =	$f9
    187  10000 ????						; the stack bytes above may be used in the kernel
    188  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  10000 ????
    190  10000 ????				       MAC	return
    191  10000 ????				       ifnconst	bankswitch
    192  10000 ????				       rts
    193  10000 ????				       else
    194  10000 ????				       jmp	BS_return
    195  10000 ????				       endif
    196  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    197  10000 ????
    198  10000 ????			   -	       ifconst	superchip
    199  10000 ????			   -playfieldbase =	$10D0
    200  10000 ????			   -	       include	superchip.h
    201  10000 ????				       else
    202  10000 ????		00 a4	    playfieldbase =	$A4
    203  10000 ????				       endif
    204  10000 ????
    205  10000 ????				       ifnconst	pfhalfwidth
    206  10000 ????		00 04	    pfwidth    =	4
    207  10000 ????		00 0e	    PF1L       =	PF1
    208  10000 ????		00 0f	    PF2L       =	PF2
    209  10000 ????		00 0e	    PF1R       =	PF1
    210  10000 ????		00 0f	    PF2R       =	PF2
    211  10000 ????		00 00	    pfadjust   =	0
    212  10000 ????			   -	       else
    213  10000 ????			   -pfwidth    =	2
    214  10000 ????			   -	       ifconst	pfcenter
    215  10000 ????			   -PF1L       =	$3F	; no effect
    216  10000 ????			   -PF2L       =	PF2
    217  10000 ????			   -PF1R       =	$3F
    218  10000 ????			   -PF2R       =	PF2	; no effect
    219  10000 ????			   -pfadjust   =	1
    220  10000 ????			   -	       else
    221  10000 ????			   -PF1L       =	PF1
    222  10000 ????			   -PF2L       =	PF2
    223  10000 ????			   -PF1R       =	$3F	; no effect
    224  10000 ????			   -PF2R       =	$3F	; no effect
    225  10000 ????			   -pfadjust   =	0
    226  10000 ????			   -	       endif
    227  10000 ????				       endif
    228  10000 ????
    229  10000 ????						; define playfield start based on height
    230  10000 ????			   -	       ifnconst	pfres
    231  10000 ????			   -playfield  =	playfieldbase
    232  10000 ????				       else
    233  10000 ????		00 c8	    playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  10000 ????				       endif
------- FILE C:\Users\EWARS_2\Desktop\BestWestern\a.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
      3  10000 ????		00 ec	    _Bit7_Flip_P1 =	y
      4  10000 ????
      5  10000 ????		00 d9	    _checkpointCount =	f
      6  10000 ????
      7  10000 ????		00 d8	    _speed     =	e
      8  10000 ????
      9  10000 ????		00 d7	    _scoreTemp =	d
     10  10000 ????
     11  10000 ????		00 d6	    _rng       =	c
     12  10000 ????
     13  10000 ????		00 d5	    _frameCounter =	b
     14  10000 ????
     15  10000 ????		00 d4	    _velocity  =	a
     16  10000 ????
     17  10000 ????		00 03	    pfres      =	3
     18  10000 ????
     19  10000 ????		00 01	    PFcolors   =	1
     20  10000 ????		00 01	    backgroundchange =	1
     21  10000 ????		00 01	    no_blank_lines =	1
------- FILE C:\Users\EWARS_2\Desktop\BestWestern\a.bas.asm
      8  10000 ????			   -	       ifconst	bankswitch
      9  10000 ????			   -	       if	bankswitch == 8
     10  10000 ????			   -	       ORG	$1000
     11  10000 ????			   -	       RORG	$D000
     12  10000 ????			   -	       endif
     13  10000 ????			   -	       if	bankswitch == 16
     14  10000 ????			   -	       ORG	$1000
     15  10000 ????			   -	       RORG	$9000
     16  10000 ????			   -	       endif
     17  10000 ????			   -	       if	bankswitch == 32
     18  10000 ????			   -	       ORG	$1000
     19  10000 ????			   -	       RORG	$1000
     20  10000 ????			   -	       endif
     21  10000 ????			   -	       if	bankswitch == 64
     22  10000 ????			   -	       ORG	$1000
     23  10000 ????			   -	       RORG	$1000
     24  10000 ????			   -	       endif
     25  10000 ????				       else
     26  f000					      ORG	$F000
     27  f000					      endif
     28  f000
     29  f000				  -	      ifconst	bankswitch_hotspot
     30  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     31  f000				  -	      .byte	0	; stop unexpected bankswitches
     32  f000				  -	      endif
     33  f000					      endif
     34  f000							; Provided under the CC0 license. See the included LICENSE.txt for details.
     35  f000
     36  f000				   start
     37  f000		       78		      sei
     38  f001		       d8		      cld
     39  f002		       a0 00		      ldy	#0
     40  f004		       a5 d0		      lda	$D0
     41  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     42  f008		       d0 07		      bne	MachineIs2600
     43  f00a		       a5 d1		      lda	$D1
     44  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     45  f00e		       d0 01		      bne	MachineIs2600
     46  f010		       88		      dey
     47  f011				   MachineIs2600
     48  f011		       a2 00		      ldx	#0
     49  f013		       8a		      txa
     50  f014				   clearmem
     51  f014		       e8		      inx
     52  f015		       9a		      txs
     53  f016		       48		      pha
     54  f017		       d0 fb		      bne	clearmem
     55  f019		       84 9c		      sty	temp1
     56  f01b					      ifnconst	multisprite
     57  f01b				  -	      ifconst	pfrowheight
     58  f01b				  -	      lda	#pfrowheight
     59  f01b					      else
     60  f01b					      ifconst	pfres
     61  f01b		       a9 20		      lda	#(96/pfres)
     62  f01d				  -	      else
     63  f01d				  -	      lda	#8
     64  f01d					      endif
     65  f01d					      endif
     66  f01d		       85 ef		      sta	playfieldpos
     67  f01f					      endif
     68  f01f		       a2 05		      ldx	#5
     69  f021				   initscore
     70  f021		       a9 9c		      lda	#<scoretable
     71  f023		       95 96		      sta	scorepointers,x
     72  f025		       ca		      dex
     73  f026		       10 f9		      bpl	initscore
     74  f028		       a9 01		      lda	#1
     75  f02a		       85 0a		      sta	CTRLPF
     76  f02c		       0d 84 02 	      ora	INTIM
     77  f02f		       85 a2		      sta	rand
     78  f031
     79  f031				  -	      ifconst	multisprite
     80  f031				  -	      jsr	multisprite_setup
     81  f031					      endif
     82  f031
     83  f031					      ifnconst	bankswitch
     84  f031		       4c 6e f4 	      jmp	game
     85  f034				  -	      else
     86  f034				  -	      lda	#>(game-1)
     87  f034				  -	      pha
     88  f034				  -	      lda	#<(game-1)
     89  f034				  -	      pha
     90  f034				  -	      pha
     91  f034				  -	      pha
     92  f034				  -	      ldx	#1
     93  f034				  -	      jmp	BS_jsr
     94  f034					      endif
     95  f034							; Provided under the CC0 license. See the included LICENSE.txt for details.
     96  f034
     97  f034							; This is a 2-line kernel!
     98  f034					      ifnconst	vertical_reflect
     99  f034				   kernel
    100  f034					      endif
    101  f034		       85 02		      sta	WSYNC
    102  f036		       a9 ff		      lda	#255
    103  f038		       8d 96 02 	      sta	TIM64T
    104  f03b
    105  f03b		       a9 01		      lda	#1
    106  f03d		       85 27		      sta	VDELBL
    107  f03f		       85 25		      sta	VDELP0
    108  f041		       a6 92		      ldx	ballheight
    109  f043		       e8		      inx
    110  f044		       e8		      inx
    111  f045		       86 9f		      stx	temp4
    112  f047		       a5 86		      lda	player1y
    113  f049		       85 9e		      sta	temp3
    114  f04b
    115  f04b				  -	      ifconst	shakescreen
    116  f04b				  -	      jsr	doshakescreen
    117  f04b					      else
    118  f04b		       a6 90		      ldx	missile0height
    119  f04d		       e8		      inx
    120  f04e					      endif
    121  f04e
    122  f04e		       e8		      inx
    123  f04f		       86 f6		      stx	stack1
    124  f051
    125  f051		       a5 89		      lda	bally
    126  f053		       85 f7		      sta	stack2
    127  f055
    128  f055		       a5 85		      lda	player0y
    129  f057		       a2 00		      ldx	#0
    130  f059		       85 02		      sta	WSYNC
    131  f05b		       86 1b		      stx	GRP0
    132  f05d		       86 1c		      stx	GRP1
    133  f05f		       86 0e		      stx	PF1L
    134  f061		       86 0f		      stx	PF2
    135  f063		       86 2c		      stx	CXCLR
    136  f065				  -	      ifconst	readpaddle
    137  f065				  -	      stx	paddle
    138  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    140  f067					      endif
    141  f067
    142  f067		       95 9d		      sta	temp2,x
    143  f069
    144  f069							;store these so they can be retrieved later
    145  f069				  -	      ifnconst	pfres
    146  f069				  -	      ldx	#128-44+(4-pfwidth)*12
    147  f069					      else
    148  f069		       a2 78		      ldx	#132-pfres*pfwidth
    149  f06b					      endif
    150  f06b
    151  f06b		       c6 85		      dec	player0y
    152  f06d
    153  f06d		       a5 91		      lda	missile0y
    154  f06f		       85 a0		      sta	temp5
    155  f071		       a5 88		      lda	missile1y
    156  f073		       85 a1		      sta	temp6
    157  f075
    158  f075		       a5 ef		      lda	playfieldpos
    159  f077		       85 9c		      sta	temp1
    160  f079
    161  f079				  -	      ifconst	pfrowheight
    162  f079				  -	      lda	#pfrowheight+2
    163  f079					      else
    164  f079				  -	      ifnconst	pfres
    165  f079				  -	      lda	#10
    166  f079					      else
    167  f079		       a9 22		      lda	#(96/pfres)+2	; try to come close to the real size
    168  f07b					      endif
    169  f07b					      endif
    170  f07b		       18		      clc
    171  f07c		       e5 ef		      sbc	playfieldpos
    172  f07e		       85 ef		      sta	playfieldpos
    173  f080		       4c a8 f0 	      jmp	.startkernel
    174  f083
    175  f083				   .skipDrawP0
    176  f083		       a9 00		      lda	#0
    177  f085		       a8		      tay
    178  f086		       4c d6 f0 	      jmp	.continueP0
    179  f089
    180  f089				   .skipDrawP1
    181  f089		       a9 00		      lda	#0
    182  f08b		       a8		      tay
    183  f08c		       4c b2 f0 	      jmp	.continueP1
    184  f08f
    185  f08f				   .kerloop		; enter at cycle 59??
    186  f08f
    187  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    189  f090				   continuekernel2
    190  f090		       a5 92		      lda	ballheight
    191  f092
    192  f092					      ifconst	pfres
    193  f092		       b4 50		      ldy	playfield+pfres*pfwidth-132,x
    194  f094		       84 0e		      sty	PF1L	;3
    195  f096		       b4 51		      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    196  f098		       84 0f		      sty	PF2L	;3
    197  f09a		       b4 53		      ldy	playfield+pfres*pfwidth-129,x
    198  f09c		       84 0e		      sty	PF1R	; 3 too early?
    199  f09e		       b4 52		      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    200  f0a0		       84 0f		      sty	PF2R	;3
    201  f0a2				  -	      else
    202  f0a2				  -	      ldy	playfield-48+pfwidth*12+44-128,x
    203  f0a2				  -	      sty	PF1L	;3
    204  f0a2				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    205  f0a2				  -	      sty	PF2L	;3
    206  f0a2				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
    207  f0a2				  -	      sty	PF1R	; 3 too early?
    208  f0a2				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    209  f0a2				  -	      sty	PF2R	;3
    210  f0a2					      endif
    211  f0a2
    212  f0a2							; should be playfield+$38 for width=2
    213  f0a2
    214  f0a2		       c7 89		      dcp	bally
    215  f0a4		       2a		      rol
    216  f0a5		       2a		      rol
    217  f0a6							; rol
    218  f0a6							; rol
    219  f0a6				   goback
    220  f0a6		       85 1f		      sta	ENABL
    221  f0a8				   .startkernel
    222  f0a8		       a5 8f		      lda	player1height	;3
    223  f0aa		       c7 86		      dcp	player1y	;5
    224  f0ac		       90 db		      bcc	.skipDrawP1	;2
    225  f0ae		       a4 86		      ldy	player1y	;3
    226  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    227  f0b2							; so it doesn't cross a page boundary!
    228  f0b2
    229  f0b2				   .continueP1
    230  f0b2		       85 1c		      sta	GRP1	;3
    231  f0b4
    232  f0b4					      ifnconst	player1colors
    233  f0b4		       a5 87		      lda	missile1height	;3
    234  f0b6		       c7 88		      dcp	missile1y	;5
    235  f0b8		       2a		      rol		;2
    236  f0b9		       2a		      rol		;2
    237  f0ba		       85 1e		      sta	ENAM1	;3
    238  f0bc				  -	      else
    239  f0bc				  -	      lda	(player1color),y
    240  f0bc				  -	      sta	COLUP1
    241  f0bc				  -	      ifnconst	playercolors
    242  f0bc				  -	      sleep	7
    243  f0bc				  -	      else
    244  f0bc				  -	      lda.w	player0colorstore
    245  f0bc				  -	      sta	COLUP0
    246  f0bc				  -	      endif
    247  f0bc					      endif
    248  f0bc
    249  f0bc					      ifconst	pfres
    250  f0bc		       b5 50		      lda	playfield+pfres*pfwidth-132,x
    251  f0be		       85 0e		      sta	PF1L	;3
    252  f0c0		       b5 51		      lda	playfield+pfres*pfwidth-131-pfadjust,x
    253  f0c2		       85 0f		      sta	PF2L	;3
    254  f0c4		       b5 53		      lda	playfield+pfres*pfwidth-129,x
    255  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    256  f0c8		       b5 52		      lda	playfield+pfres*pfwidth-130-pfadjust,x
    257  f0ca		       85 0f		      sta	PF2R	;3
    258  f0cc				  -	      else
    259  f0cc				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
    260  f0cc				  -	      sta	PF1L	;3
    261  f0cc				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    262  f0cc				  -	      sta	PF2L	;3
    263  f0cc				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
    264  f0cc				  -	      sta	PF1R	; 3 too early?
    265  f0cc				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    266  f0cc				  -	      sta	PF2R	;3
    267  f0cc					      endif
    268  f0cc							; sleep 3
    269  f0cc
    270  f0cc		       a5 8e		      lda	player0height
    271  f0ce		       c7 85		      dcp	player0y
    272  f0d0		       90 b1		      bcc	.skipDrawP0
    273  f0d2		       a4 85		      ldy	player0y
    274  f0d4		       b1 8a		      lda	(player0pointer),y
    275  f0d6				   .continueP0
    276  f0d6		       85 1b		      sta	GRP0
    277  f0d8
    278  f0d8				  -	      ifnconst	no_blank_lines
    279  f0d8				  -	      ifnconst	playercolors
    280  f0d8				  -	      lda	missile0height	;3
    281  f0d8				  -	      dcp	missile0y	;5
    282  f0d8				  -	      sbc	stack1
    283  f0d8				  -	      sta	ENAM0	;3
    284  f0d8				  -	      else
    285  f0d8				  -	      lda	(player0color),y
    286  f0d8				  -	      sta	player0colorstore
    287  f0d8				  -	      sleep	6
    288  f0d8				  -	      endif
    289  f0d8				  -	      dec	temp1
    290  f0d8				  -	      bne	continuekernel
    291  f0d8					      else
    292  f0d8		       c6 9c		      dec	temp1
    293  f0da		       f0 0c		      beq	altkernel2
    294  f0dc				  -	      ifconst	readpaddle
    295  f0dc				  -	      ldy	currentpaddle
    296  f0dc				  -	      lda	INPT0,y
    297  f0dc				  -	      bpl	noreadpaddle
    298  f0dc				  -	      inc	paddle
    299  f0dc				  -	      jmp	continuekernel2
    300  f0dc				  -noreadpaddle
    301  f0dc				  -	      sleep	2
    302  f0dc				  -	      jmp	continuekernel
    303  f0dc					      else
    304  f0dc					      ifnconst	playercolors
    305  f0dc					      ifconst	PFcolors
    306  f0dc		       8a		      txa
    307  f0dd		       a8		      tay
    308  f0de		       b1 f0		      lda	(pfcolortable),y
    309  f0e0				  -	      ifnconst	backgroundchange
    310  f0e0				  -	      sta	COLUPF
    311  f0e0					      else
    312  f0e0		       85 09		      sta	COLUBK
    313  f0e2					      endif
    314  f0e2		       4c 8f f0 	      jmp	continuekernel
    315  f0e5				  -	      else
    316  f0e5				  -	      ifconst	kernelmacrodef
    317  f0e5				  -	      kernelmacro
    318  f0e5				  -	      else
    319  f0e5				  -	      sleep	12
    320  f0e5				  -	      endif
    321  f0e5					      endif
    322  f0e5				  -	      else
    323  f0e5				  -	      lda	(player0color),y
    324  f0e5				  -	      sta	player0colorstore
    325  f0e5				  -	      sleep	4
    326  f0e5					      endif
    327  f0e5		       4c 8f f0 	      jmp	continuekernel
    328  f0e8					      endif
    329  f0e8				   altkernel2
    330  f0e8		       8a		      txa
    331  f0e9					      ifnconst	vertical_reflect
    332  f0e9		       cb fc		      sbx	#256-pfwidth
    333  f0eb				  -	      else
    334  f0eb				  -	      sbx	#256-pfwidth/2
    335  f0eb					      endif
    336  f0eb		       30 24		      bmi	lastkernelline
    337  f0ed				  -	      ifconst	pfrowheight
    338  f0ed				  -	      lda	#pfrowheight
    339  f0ed					      else
    340  f0ed				  -	      ifnconst	pfres
    341  f0ed				  -	      lda	#8
    342  f0ed					      else
    343  f0ed		       a9 20		      lda	#(96/pfres)	; try to come close to the real size
    344  f0ef					      endif
    345  f0ef					      endif
    346  f0ef		       85 9c		      sta	temp1
    347  f0f1		       4c 8f f0 	      jmp	continuekernel
    348  f0f4					      endif
    349  f0f4
    350  f0f4				   altkernel
    351  f0f4
    352  f0f4				  -	      ifconst	PFmaskvalue
    353  f0f4				  -	      lda	#PFmaskvalue
    354  f0f4					      else
    355  f0f4		       a9 00		      lda	#0
    356  f0f6					      endif
    357  f0f6		       85 0e		      sta	PF1L
    358  f0f8		       85 0f		      sta	PF2
    359  f0fa
    360  f0fa
    361  f0fa							;sleep 3
    362  f0fa
    363  f0fa							;28 cycles to fix things
    364  f0fa							;minus 11=17
    365  f0fa
    366  f0fa							; lax temp4
    367  f0fa							; clc
    368  f0fa		       8a		      txa
    369  f0fb					      ifnconst	vertical_reflect
    370  f0fb		       cb fc		      sbx	#256-pfwidth
    371  f0fd				  -	      else
    372  f0fd				  -	      sbx	#256-pfwidth/2
    373  f0fd					      endif
    374  f0fd
    375  f0fd		       30 12		      bmi	lastkernelline
    376  f0ff
    377  f0ff				  -	      ifconst	PFcolorandheight
    378  f0ff				  -	      ifconst	pfres
    379  f0ff				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    380  f0ff				  -	      else
    381  f0ff				  -	      ldy	playfieldcolorandheight-87,x
    382  f0ff				  -	      endif
    383  f0ff				  -	      ifnconst	backgroundchange
    384  f0ff				  -	      sty	COLUPF
    385  f0ff				  -	      else
    386  f0ff				  -	      sty	COLUBK
    387  f0ff				  -	      endif
    388  f0ff				  -	      ifconst	pfres
    389  f0ff				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    390  f0ff				  -	      else
    391  f0ff				  -	      lda	playfieldcolorandheight-88,x
    392  f0ff				  -	      endif
    393  f0ff				  -	      sta.w	temp1
    394  f0ff					      endif
    395  f0ff				  -	      ifconst	PFheights
    396  f0ff				  -	      lsr
    397  f0ff				  -	      lsr
    398  f0ff				  -	      tay
    399  f0ff				  -	      lda	(pfheighttable),y
    400  f0ff				  -	      sta.w	temp1
    401  f0ff					      endif
    402  f0ff					      ifconst	PFcolors
    403  f0ff		       a8		      tay
    404  f100		       b1 f0		      lda	(pfcolortable),y
    405  f102				  -	      ifnconst	backgroundchange
    406  f102				  -	      sta	COLUPF
    407  f102					      else
    408  f102		       85 09		      sta	COLUBK
    409  f104					      endif
    410  f104				  -	      ifconst	pfrowheight
    411  f104				  -	      lda	#pfrowheight
    412  f104					      else
    413  f104				  -	      ifnconst	pfres
    414  f104				  -	      lda	#8
    415  f104					      else
    416  f104		       a9 20		      lda	#(96/pfres)	; try to come close to the real size
    417  f106					      endif
    418  f106					      endif
    419  f106		       85 9c		      sta	temp1
    420  f108					      endif
    421  f108					      ifnconst	PFcolorandheight
    422  f108				  -	      ifnconst	PFcolors
    423  f108				  -	      ifnconst	PFheights
    424  f108				  -	      ifnconst	no_blank_lines
    425  f108				  -			; read paddle 0
    426  f108				  -			; lo-res paddle read
    427  f108				  -			; bit INPT0
    428  f108				  -			; bmi paddleskipread
    429  f108				  -			; inc paddle0
    430  f108				  -			;donepaddleskip
    431  f108				  -	      sleep	10
    432  f108				  -	      ifconst	pfrowheight
    433  f108				  -	      lda	#pfrowheight
    434  f108				  -	      else
    435  f108				  -	      ifnconst	pfres
    436  f108				  -	      lda	#8
    437  f108				  -	      else
    438  f108				  -	      lda	#(96/pfres)	; try to come close to the real size
    439  f108				  -	      endif
    440  f108				  -	      endif
    441  f108				  -	      sta	temp1
    442  f108				  -	      endif
    443  f108				  -	      endif
    444  f108					      endif
    445  f108					      endif
    446  f108
    447  f108
    448  f108		       a5 92		      lda	ballheight
    449  f10a		       c7 89		      dcp	bally
    450  f10c		       e5 9f		      sbc	temp4
    451  f10e
    452  f10e
    453  f10e		       4c a6 f0 	      jmp	goback
    454  f111
    455  f111
    456  f111				  -	      ifnconst	no_blank_lines
    457  f111				  -lastkernelline
    458  f111				  -	      ifnconst	PFcolors
    459  f111				  -	      sleep	10
    460  f111				  -	      else
    461  f111				  -	      ldy	#124
    462  f111				  -	      lda	(pfcolortable),y
    463  f111				  -	      sta	COLUPF
    464  f111				  -	      endif
    465  f111				  -
    466  f111				  -	      ifconst	PFheights
    467  f111				  -	      ldx	#1
    468  f111				  -			;sleep 4
    469  f111				  -	      sleep	3	; this was over 1 cycle
    470  f111				  -	      else
    471  f111				  -	      ldx	playfieldpos
    472  f111				  -			;sleep 3
    473  f111				  -	      sleep	2	; this was over 1 cycle
    474  f111				  -	      endif
    475  f111				  -
    476  f111				  -	      jmp	enterlastkernel
    477  f111				  -
    478  f111					      else
    479  f111				   lastkernelline
    480  f111
    481  f111				  -	      ifconst	PFheights
    482  f111				  -	      ldx	#1
    483  f111				  -			;sleep 5
    484  f111				  -	      sleep	4	; this was over 1 cycle
    485  f111					      else
    486  f111		       a6 ef		      ldx	playfieldpos
    487  f113							;sleep 4
      0  f113					      sleep	3	; this was over 1 cycle
      1  f113				   .CYCLES    SET	3
      2  f113
      3  f113				  -	      IF	.CYCLES < 2
      4  f113				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f113				  -	      ERR
      6  f113					      ENDIF
      7  f113
      8  f113					      IF	.CYCLES & 1
      9  f113					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f113		       04 00		      nop	0
     11  f115				  -	      ELSE
     12  f115				  -	      bit	VSYNC
     13  f115					      ENDIF
     14  f115				   .CYCLES    SET	.CYCLES - 3
     15  f115					      ENDIF
     16  f115
     17  f115				  -	      REPEAT	.CYCLES / 2
     18  f115				  -	      nop
     19  f115					      REPEND
    489  f115					      endif
    490  f115
    491  f115		       e0 00		      cpx	#0
    492  f117		       d0 0a		      bne	.enterfromNBL
    493  f119		       4c 84 f1 	      jmp	no_blank_lines_bailout
    494  f11c					      endif
    495  f11c
    496  f11c				  -	      if	((<*)>$d5)
    497  f11c				  -	      align	256
    498  f11c					      endif
    499  f11c							; this is a kludge to prevent page wrapping - fix!!!
    500  f11c
    501  f11c				   .skipDrawlastP1
    502  f11c		       a9 00		      lda	#0
    503  f11e		       a8		      tay		; added so we don't cross a page
    504  f11f		       4c 49 f1 	      jmp	.continuelastP1
    505  f122
    506  f122				   .endkerloop		; enter at cycle 59??
    507  f122
    508  f122		       ea		      nop
    509  f123
    510  f123				   .enterfromNBL
    511  f123					      ifconst	pfres
    512  f123		       ac d0 00 	      ldy.w	playfield+pfres*pfwidth-4
    513  f126		       84 0e		      sty	PF1L	;3
    514  f128		       ac d1 00 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    515  f12b		       84 0f		      sty	PF2L	;3
    516  f12d		       ac d3 00 	      ldy.w	playfield+pfres*pfwidth-1
    517  f130		       84 0e		      sty	PF1R	; possibly too early?
    518  f132		       ac d2 00 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    519  f135		       84 0f		      sty	PF2R	;3
    520  f137				  -	      else
    521  f137				  -	      ldy.w	playfield-48+pfwidth*12+44
    522  f137				  -	      sty	PF1L	;3
    523  f137				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    524  f137				  -	      sty	PF2L	;3
    525  f137				  -	      ldy.w	playfield-48+pfwidth*12+47
    526  f137				  -	      sty	PF1R	; possibly too early?
    527  f137				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    528  f137				  -	      sty	PF2R	;3
    529  f137					      endif
    530  f137
    531  f137				   enterlastkernel
    532  f137		       a5 92		      lda	ballheight
    533  f139
    534  f139							; tya
    535  f139		       c7 89		      dcp	bally
    536  f13b							; sleep 4
    537  f13b
    538  f13b							; sbc stack3
    539  f13b		       2a		      rol
    540  f13c		       2a		      rol
    541  f13d		       85 1f		      sta	ENABL
    542  f13f
    543  f13f		       a5 8f		      lda	player1height	;3
    544  f141		       c7 86		      dcp	player1y	;5
    545  f143		       90 d7		      bcc	.skipDrawlastP1
    546  f145		       a4 86		      ldy	player1y	;3
    547  f147		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    548  f149							; so it doesn't cross a page boundary!
    549  f149
    550  f149				   .continuelastP1
    551  f149		       85 1c		      sta	GRP1	;3
    552  f14b
    553  f14b					      ifnconst	player1colors
    554  f14b		       a5 87		      lda	missile1height	;3
    555  f14d		       c7 88		      dcp	missile1y	;5
    556  f14f				  -	      else
    557  f14f				  -	      lda	(player1color),y
    558  f14f				  -	      sta	COLUP1
    559  f14f					      endif
    560  f14f
    561  f14f		       ca		      dex
    562  f150							;dec temp4 ; might try putting this above PF writes
    563  f150		       f0 34		      beq	endkernel
    564  f152
    565  f152
    566  f152					      ifconst	pfres
    567  f152		       ac d0 00 	      ldy.w	playfield+pfres*pfwidth-4
    568  f155		       84 0e		      sty	PF1L	;3
    569  f157		       ac d1 00 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    570  f15a		       84 0f		      sty	PF2L	;3
    571  f15c		       ac d3 00 	      ldy.w	playfield+pfres*pfwidth-1
    572  f15f		       84 0e		      sty	PF1R	; possibly too early?
    573  f161		       ac d2 00 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    574  f164		       84 0f		      sty	PF2R	;3
    575  f166				  -	      else
    576  f166				  -	      ldy.w	playfield-48+pfwidth*12+44
    577  f166				  -	      sty	PF1L	;3
    578  f166				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    579  f166				  -	      sty	PF2L	;3
    580  f166				  -	      ldy.w	playfield-48+pfwidth*12+47
    581  f166				  -	      sty	PF1R	; possibly too early?
    582  f166				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    583  f166				  -	      sty	PF2R	;3
    584  f166					      endif
    585  f166
    586  f166					      ifnconst	player1colors
    587  f166		       2a		      rol		;2
    588  f167		       2a		      rol		;2
    589  f168		       85 1e		      sta	ENAM1	;3
    590  f16a				  -	      else
    591  f16a				  -	      ifnconst	playercolors
    592  f16a				  -	      sleep	7
    593  f16a				  -	      else
    594  f16a				  -	      lda.w	player0colorstore
    595  f16a				  -	      sta	COLUP0
    596  f16a				  -	      endif
    597  f16a					      endif
    598  f16a
    599  f16a		       ad 8e 00 	      lda.w	player0height
    600  f16d		       c7 85		      dcp	player0y
    601  f16f		       90 0d		      bcc	.skipDrawlastP0
    602  f171		       a4 85		      ldy	player0y
    603  f173		       b1 8a		      lda	(player0pointer),y
    604  f175				   .continuelastP0
    605  f175		       85 1b		      sta	GRP0
    606  f177
    607  f177
    608  f177
    609  f177				  -	      ifnconst	no_blank_lines
    610  f177				  -	      lda	missile0height	;3
    611  f177				  -	      dcp	missile0y	;5
    612  f177				  -	      sbc	stack1
    613  f177				  -	      sta	ENAM0	;3
    614  f177				  -	      jmp	.endkerloop
    615  f177					      else
    616  f177				  -	      ifconst	readpaddle
    617  f177				  -	      ldy	currentpaddle
    618  f177				  -	      lda	INPT0,y
    619  f177				  -	      bpl	noreadpaddle2
    620  f177				  -	      inc	paddle
    621  f177				  -	      jmp	.endkerloop
    622  f177				  -noreadpaddle2
    623  f177				  -	      sleep	4
    624  f177				  -	      jmp	.endkerloop
    625  f177					      else		; no_blank_lines and no paddle reading
    626  f177		       68		      pla
    627  f178		       48		      pha		; 14 cycles in 4 bytes
    628  f179		       68		      pla
    629  f17a		       48		      pha
    630  f17b							; sleep 14
    631  f17b		       4c 22 f1 	      jmp	.endkerloop
    632  f17e					      endif
    633  f17e					      endif
    634  f17e
    635  f17e
    636  f17e							; ifconst donepaddleskip
    637  f17e							;paddleskipread
    638  f17e							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    639  f17e							; plus we get a lo-res paddle read
    640  f17e							; bmi donepaddleskip
    641  f17e							; endif
    642  f17e
    643  f17e				   .skipDrawlastP0
    644  f17e		       a9 00		      lda	#0
    645  f180		       a8		      tay
    646  f181		       4c 75 f1 	      jmp	.continuelastP0
    647  f184
    648  f184					      ifconst	no_blank_lines
    649  f184				   no_blank_lines_bailout
    650  f184		       a2 00		      ldx	#0
    651  f186					      endif
    652  f186
    653  f186				   endkernel
    654  f186							; 6 digit score routine
    655  f186		       86 0e		      stx	PF1
    656  f188		       86 0f		      stx	PF2
    657  f18a		       86 0d		      stx	PF0
    658  f18c		       18		      clc
    659  f18d
    660  f18d				  -	      ifconst	pfrowheight
    661  f18d				  -	      lda	#pfrowheight+2
    662  f18d					      else
    663  f18d				  -	      ifnconst	pfres
    664  f18d				  -	      lda	#10
    665  f18d					      else
    666  f18d		       a9 22		      lda	#(96/pfres)+2	; try to come close to the real size
    667  f18f					      endif
    668  f18f					      endif
    669  f18f
    670  f18f		       e5 ef		      sbc	playfieldpos
    671  f191		       85 ef		      sta	playfieldpos
    672  f193		       8a		      txa
    673  f194
    674  f194				  -	      ifconst	shakescreen
    675  f194				  -	      bit	shakescreen
    676  f194				  -	      bmi	noshakescreen2
    677  f194				  -	      ldx	#$3D
    678  f194				  -noshakescreen2
    679  f194					      endif
    680  f194
    681  f194		       95 02		      sta	WSYNC,x
    682  f196
    683  f196							; STA WSYNC ;first one, need one more
    684  f196		       85 0b		      sta	REFP0
    685  f198		       85 0c		      sta	REFP1
    686  f19a		       85 1b		      STA	GRP0
    687  f19c		       85 1c		      STA	GRP1
    688  f19e							; STA PF1
    689  f19e							; STA PF2
    690  f19e		       85 2b		      sta	HMCLR
    691  f1a0		       85 1d		      sta	ENAM0
    692  f1a2		       85 1e		      sta	ENAM1
    693  f1a4		       85 1f		      sta	ENABL
    694  f1a6
    695  f1a6		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    696  f1a8		       85 85		      sta	player0y
    697  f1aa		       a5 9e		      lda	temp3
    698  f1ac		       85 86		      sta	player1y
    699  f1ae					      ifnconst	player1colors
    700  f1ae		       a5 a1		      lda	temp6
    701  f1b0		       85 88		      sta	missile1y
    702  f1b2					      endif
    703  f1b2					      ifnconst	playercolors
    704  f1b2					      ifnconst	readpaddle
    705  f1b2		       a5 a0		      lda	temp5
    706  f1b4		       85 91		      sta	missile0y
    707  f1b6					      endif
    708  f1b6					      endif
    709  f1b6		       a5 f7		      lda	stack2
    710  f1b8		       85 89		      sta	bally
    711  f1ba
    712  f1ba							; strangely, this isn't required any more. might have
    713  f1ba							; resulted from the no_blank_lines score bounce fix
    714  f1ba							;ifconst no_blank_lines
    715  f1ba							;sta WSYNC
    716  f1ba							;endif
    717  f1ba
    718  f1ba		       ad 84 02 	      lda	INTIM
    719  f1bd		       18		      clc
    720  f1be					      ifnconst	vblank_time
    721  f1be		       69 8e		      adc	#43+12+87
    722  f1c0				  -	      else
    723  f1c0				  -	      adc	#vblank_time+12+87
    724  f1c0				  -
    725  f1c0					      endif
    726  f1c0							; sta WSYNC
    727  f1c0		       8d 96 02 	      sta	TIM64T
    728  f1c3
    729  f1c3				  -	      ifconst	minikernel
    730  f1c3				  -	      jsr	minikernel
    731  f1c3					      endif
    732  f1c3
    733  f1c3							; now reassign temp vars for score pointers
    734  f1c3
    735  f1c3							; score pointers contain:
    736  f1c3							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    737  f1c3							; swap lo2->temp1
    738  f1c3							; swap lo4->temp3
    739  f1c3							; swap lo6->temp5
    740  f1c3					      ifnconst	noscore
    741  f1c3		       a5 97		      lda	scorepointers+1
    742  f1c5							; ldy temp1
    743  f1c5		       85 9c		      sta	temp1
    744  f1c7							; sty scorepointers+1
    745  f1c7
    746  f1c7		       a5 99		      lda	scorepointers+3
    747  f1c9							; ldy temp3
    748  f1c9		       85 9e		      sta	temp3
    749  f1cb							; sty scorepointers+3
    750  f1cb
    751  f1cb
    752  f1cb		       85 2b		      sta	HMCLR
    753  f1cd		       ba		      tsx
    754  f1ce		       86 f6		      stx	stack1
    755  f1d0		       a2 e0		      ldx	#$E0
    756  f1d2		       86 20		      stx	HMP0
    757  f1d4
    758  f1d4		       a5 a3		      LDA	scorecolor
    759  f1d6		       85 06		      STA	COLUP0
    760  f1d8		       85 07		      STA	COLUP1
    761  f1da				  -	      ifconst	scorefade
    762  f1da				  -	      STA	stack2
    763  f1da					      endif
    764  f1da				  -	      ifconst	pfscore
    765  f1da				  -	      lda	pfscorecolor
    766  f1da				  -	      sta	COLUPF
    767  f1da					      endif
    768  f1da		       85 02		      sta	WSYNC
    769  f1dc		       a2 00		      ldx	#0
    770  f1de		       86 1b		      STx	GRP0
    771  f1e0		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    772  f1e2
    773  f1e2		       a5 9b		      lda	scorepointers+5
    774  f1e4							; ldy temp5
    775  f1e4		       95 a0		      sta	temp5,x
    776  f1e6							; sty scorepointers+5
    777  f1e6		       a9 ff		      lda	#>scoretable
    778  f1e8		       85 97		      sta	scorepointers+1
    779  f1ea		       85 99		      sta	scorepointers+3
    780  f1ec		       85 9b		      sta	scorepointers+5
    781  f1ee		       85 9d		      sta	temp2
    782  f1f0		       85 9f		      sta	temp4
    783  f1f2		       85 a1		      sta	temp6
    784  f1f4		       a0 07		      LDY	#7
    785  f1f6		       84 25		      STY	VDELP0
    786  f1f8		       85 10		      STA	RESP0
    787  f1fa		       85 11		      STA	RESP1
    788  f1fc
    789  f1fc
    790  f1fc		       a9 03		      LDA	#$03
    791  f1fe		       85 04		      STA	NUSIZ0
    792  f200		       85 05		      STA	NUSIZ1
    793  f202		       85 26		      STA	VDELP1
    794  f204		       a9 f0		      LDA	#$F0
    795  f206		       85 21		      STA	HMP1
    796  f208		       b1 96		      lda	(scorepointers),y
    797  f20a		       85 1b		      sta	GRP0
    798  f20c		       85 2a		      STA	HMOVE	; cycle 73 ?
    799  f20e		       4c 19 f2 	      jmp	beginscore
    800  f211
    801  f211
    802  f211				  -	      if	((<*)>$d4)
    803  f211				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    804  f211					      endif
    805  f211
    806  f211				   loop2
    807  f211		       b1 96		      lda	(scorepointers),y	;+5 68 204
    808  f213		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    809  f215				  -	      ifconst	pfscore
    810  f215				  -	      lda.w	pfscore1
    811  f215				  -	      sta	PF1
    812  f215					      else
    813  f215				  -	      ifconst	scorefade
    814  f215				  -	      sleep	2
    815  f215				  -	      dec	stack2	; decrement the temporary scorecolor
    816  f215					      else
      0  f215					      sleep	7
      1  f215				   .CYCLES    SET	7
      2  f215
      3  f215				  -	      IF	.CYCLES < 2
      4  f215				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f215				  -	      ERR
      6  f215					      ENDIF
      7  f215
      8  f215					      IF	.CYCLES & 1
      9  f215					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f215		       04 00		      nop	0
     11  f217				  -	      ELSE
     12  f217				  -	      bit	VSYNC
     13  f217					      ENDIF
     14  f217				   .CYCLES    SET	.CYCLES - 3
     15  f217					      ENDIF
     16  f217
     17  f217					      REPEAT	.CYCLES / 2
     18  f217		       ea		      nop
     17  f217					      REPEND
     18  f218		       ea		      nop
     19  f219					      REPEND
    818  f219					      endif
    819  f219					      endif
    820  f219							; cycle 0
    821  f219				   beginscore
    822  f219		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    823  f21b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    824  f21d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    825  f21f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    826  f221		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    827  f223		       9a		      txs
    828  f224		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    829  f226				  -	      ifconst	scorefade
    830  f226				  -	      lda	stack2
    831  f226					      else
      0  f226					      sleep	3
      1  f226				   .CYCLES    SET	3
      2  f226
      3  f226				  -	      IF	.CYCLES < 2
      4  f226				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f226				  -	      ERR
      6  f226					      ENDIF
      7  f226
      8  f226					      IF	.CYCLES & 1
      9  f226					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f226		       04 00		      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228					      ENDIF
     14  f228				   .CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228				  -	      REPEAT	.CYCLES / 2
     18  f228				  -	      nop
     19  f228					      REPEND
    833  f228					      endif
    834  f228
    835  f228				  -	      ifconst	pfscore
    836  f228				  -	      lda	pfscore2
    837  f228				  -	      sta	PF1
    838  f228					      else
    839  f228				  -	      ifconst	scorefade
    840  f228				  -	      sta	COLUP0
    841  f228				  -	      sta	COLUP1
    842  f228					      else
      0  f228					      sleep	6
      1  f228				   .CYCLES    SET	6
      2  f228
      3  f228				  -	      IF	.CYCLES < 2
      4  f228				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f228				  -	      ERR
      6  f228					      ENDIF
      7  f228
      8  f228				  -	      IF	.CYCLES & 1
      9  f228				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f228				  -	      nop	0
     11  f228				  -	      ELSE
     12  f228				  -	      bit	VSYNC
     13  f228				  -	      ENDIF
     14  f228				  -.CYCLES    SET	.CYCLES - 3
     15  f228					      ENDIF
     16  f228
     17  f228					      REPEAT	.CYCLES / 2
     18  f228		       ea		      nop
     17  f228					      REPEND
     18  f229		       ea		      nop
     17  f229					      REPEND
     18  f22a		       ea		      nop
     19  f22b					      REPEND
    844  f22b					      endif
    845  f22b					      endif
    846  f22b
    847  f22b		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    848  f22d		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    849  f22f		       ba		      tsx
    850  f230		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    851  f232		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    852  f234		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    853  f236		       88		      dey
    854  f237		       10 d8		      bpl	loop2	;+2 60 180
    855  f239
    856  f239		       a6 f6		      ldx	stack1
    857  f23b		       9a		      txs
    858  f23c							; lda scorepointers+1
    859  f23c		       a4 9c		      ldy	temp1
    860  f23e							; sta temp1
    861  f23e		       84 97		      sty	scorepointers+1
    862  f240
    863  f240		       a9 00		      LDA	#0
    864  f242		       85 0e		      sta	PF1
    865  f244		       85 1b		      STA	GRP0
    866  f246		       85 1c		      STA	GRP1
    867  f248		       85 25		      STA	VDELP0
    868  f24a		       85 26		      STA	VDELP1	;do we need these
    869  f24c		       85 04		      STA	NUSIZ0
    870  f24e		       85 05		      STA	NUSIZ1
    871  f250
    872  f250							; lda scorepointers+3
    873  f250		       a4 9e		      ldy	temp3
    874  f252							; sta temp3
    875  f252		       84 99		      sty	scorepointers+3
    876  f254
    877  f254							; lda scorepointers+5
    878  f254		       a4 a0		      ldy	temp5
    879  f256							; sta temp5
    880  f256		       84 9b		      sty	scorepointers+5
    881  f258					      endif		;noscore
    882  f258				  -	      ifconst	readpaddle
    883  f258				  -	      lda	#%11000010
    884  f258					      else
    885  f258				  -	      ifconst	qtcontroller
    886  f258				  -	      lda	qtcontroller
    887  f258				  -	      lsr		; bit 0 in carry
    888  f258				  -	      lda	#4
    889  f258				  -	      ror		; carry into top of A
    890  f258					      else
    891  f258		       a9 02		      lda	#2
    892  f25a					      endif		; qtcontroller
    893  f25a					      endif		; readpaddle
    894  f25a		       85 02		      sta	WSYNC
    895  f25c		       85 01		      sta	VBLANK
      0  f25e					      RETURN
      1  f25e					      ifnconst	bankswitch
      2  f25e		       60		      rts
      3  f25f				  -	      else
      4  f25f				  -	      jmp	BS_return
      5  f25f					      endif
    897  f25f				  -	      ifconst	shakescreen
    898  f25f				  -doshakescreen
    899  f25f				  -	      bit	shakescreen
    900  f25f				  -	      bmi	noshakescreen
    901  f25f				  -	      sta	WSYNC
    902  f25f				  -noshakescreen
    903  f25f				  -	      ldx	missile0height
    904  f25f				  -	      inx
    905  f25f				  -	      rts
    906  f25f					      endif
    907  f25f
    908  f25f							; Provided under the CC0 license. See the included LICENSE.txt for details.
    909  f25f
    910  f25f							; playfield drawing routines
    911  f25f							; you get a 32x12 bitmapped display in a single color :)
    912  f25f							; 0-31 and 0-11
    913  f25f
    914  f25f				   pfclear		; clears playfield - or fill with pattern
    915  f25f					      ifconst	pfres
    916  f25f		       a2 0b		      ldx	#pfres*pfwidth-1
    917  f261				  -	      else
    918  f261				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
    919  f261					      endif
    920  f261				   pfclear_loop
    921  f261					      ifnconst	superchip
    922  f261		       95 c8		      sta	playfield,x
    923  f263				  -	      else
    924  f263				  -	      sta	playfield-128,x
    925  f263					      endif
    926  f263		       ca		      dex
    927  f264		       10 fb		      bpl	pfclear_loop
      0  f266					      RETURN
      1  f266					      ifnconst	bankswitch
      2  f266		       60		      rts
      3  f267				  -	      else
      4  f267				  -	      jmp	BS_return
      5  f267					      endif
    929  f267
    930  f267				   setuppointers
    931  f267		       86 9d		      stx	temp2	; store on.off.flip value
    932  f269		       aa		      tax		; put x-value in x 
    933  f26a		       4a		      lsr
    934  f26b		       4a		      lsr
    935  f26c		       4a		      lsr		; divide x pos by 8 
    936  f26d		       85 9c		      sta	temp1
    937  f26f		       98		      tya
    938  f270		       0a		      asl
    939  f271					      if	pfwidth=4
    940  f271		       0a		      asl		; multiply y pos by 4
    941  f272					      endif		; else multiply by 2
    942  f272		       18		      clc
    943  f273		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    944  f275		       a8		      tay		; put the value in y
    945  f276		       a5 9d		      lda	temp2	; restore on.off.flip value
    946  f278		       60		      rts
    947  f279
    948  f279				   pfread
    949  f279							;x=xvalue, y=yvalue
    950  f279		       20 67 f2 	      jsr	setuppointers
    951  f27c		       bd e1 f2 	      lda	setbyte,x
    952  f27f		       39 c8 00 	      and	playfield,y
    953  f282		       5d e1 f2 	      eor	setbyte,x
    954  f285							; beq readzero
    955  f285							; lda #1
    956  f285							; readzero
      0  f285					      RETURN
      1  f285					      ifnconst	bankswitch
      2  f285		       60		      rts
      3  f286				  -	      else
      4  f286				  -	      jmp	BS_return
      5  f286					      endif
    958  f286
    959  f286				   pfpixel
    960  f286							;x=xvalue, y=yvalue, a=0,1,2
    961  f286		       20 67 f2 	      jsr	setuppointers
    962  f289
    963  f289				  -	      ifconst	bankswitch
    964  f289				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    965  f289				  -	      beq	pixelon_r	; if "on" go to on
    966  f289				  -	      lsr
    967  f289				  -	      bcs	pixeloff_r	; value is 1 if true
    968  f289				  -	      lda	playfield,y	; if here, it's "flip"
    969  f289				  -	      eor	setbyte,x
    970  f289				  -	      ifconst	superchip
    971  f289				  -	      sta	playfield-128,y
    972  f289				  -	      else
    973  f289				  -	      sta	playfield,y
    974  f289				  -	      endif
    975  f289				  -	      RETURN
    976  f289				  -pixelon_r
    977  f289				  -	      lda	playfield,y
    978  f289				  -	      ora	setbyte,x
    979  f289				  -	      ifconst	superchip
    980  f289				  -	      sta	playfield-128,y
    981  f289				  -	      else
    982  f289				  -	      sta	playfield,y
    983  f289				  -	      endif
    984  f289				  -	      RETURN
    985  f289				  -pixeloff_r
    986  f289				  -	      lda	setbyte,x
    987  f289				  -	      eor	#$ff
    988  f289				  -	      and	playfield,y
    989  f289				  -	      ifconst	superchip
    990  f289				  -	      sta	playfield-128,y
    991  f289				  -	      else
    992  f289				  -	      sta	playfield,y
    993  f289				  -	      endif
    994  f289				  -	      RETURN
    995  f289				  -
    996  f289					      else
    997  f289		       4c ba f2 	      jmp	plotpoint
    998  f28c					      endif
    999  f28c
   1000  f28c				   pfhline
   1001  f28c							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1002  f28c		       20 67 f2 	      jsr	setuppointers
   1003  f28f		       4c 99 f2 	      jmp	noinc
   1004  f292				   keepgoing
   1005  f292		       e8		      inx
   1006  f293		       8a		      txa
   1007  f294		       29 07		      and	#7
   1008  f296		       d0 01		      bne	noinc
   1009  f298		       c8		      iny
   1010  f299				   noinc
   1011  f299		       20 ba f2 	      jsr	plotpoint
   1012  f29c		       e4 9e		      cpx	temp3
   1013  f29e		       30 f2		      bmi	keepgoing
      0  f2a0					      RETURN
      1  f2a0					      ifnconst	bankswitch
      2  f2a0		       60		      rts
      3  f2a1				  -	      else
      4  f2a1				  -	      jmp	BS_return
      5  f2a1					      endif
   1015  f2a1
   1016  f2a1				   pfvline
   1017  f2a1							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1018  f2a1		       20 67 f2 	      jsr	setuppointers
   1019  f2a4		       84 9c		      sty	temp1	; store memory location offset
   1020  f2a6		       e6 9e		      inc	temp3	; increase final x by 1 
   1021  f2a8		       a5 9e		      lda	temp3
   1022  f2aa		       0a		      asl
   1023  f2ab					      if	pfwidth=4
   1024  f2ab		       0a		      asl		; multiply by 4
   1025  f2ac					      endif		; else multiply by 2
   1026  f2ac		       85 9e		      sta	temp3	; store it
   1027  f2ae							; Thanks to Michael Rideout for fixing a bug in this code
   1028  f2ae							; right now, temp1=y=starting memory location, temp3=final
   1029  f2ae							; x should equal original x value
   1030  f2ae				   keepgoingy
   1031  f2ae		       20 ba f2 	      jsr	plotpoint
   1032  f2b1		       c8		      iny
   1033  f2b2		       c8		      iny
   1034  f2b3					      if	pfwidth=4
   1035  f2b3		       c8		      iny
   1036  f2b4		       c8		      iny
   1037  f2b5					      endif
   1038  f2b5		       c4 9e		      cpy	temp3
   1039  f2b7		       30 f5		      bmi	keepgoingy
      0  f2b9					      RETURN
      1  f2b9					      ifnconst	bankswitch
      2  f2b9		       60		      rts
      3  f2ba				  -	      else
      4  f2ba				  -	      jmp	BS_return
      5  f2ba					      endif
   1041  f2ba
   1042  f2ba				   plotpoint
   1043  f2ba		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1044  f2bc		       f0 0d		      beq	pixelon	; if "on" go to on
   1045  f2be		       4a		      lsr
   1046  f2bf		       b0 14		      bcs	pixeloff	; value is 1 if true
   1047  f2c1		       b9 c8 00 	      lda	playfield,y	; if here, it's "flip"
   1048  f2c4		       5d e1 f2 	      eor	setbyte,x
   1049  f2c7				  -	      ifconst	superchip
   1050  f2c7				  -	      sta	playfield-128,y
   1051  f2c7					      else
   1052  f2c7		       99 c8 00 	      sta	playfield,y
   1053  f2ca					      endif
   1054  f2ca		       60		      rts
   1055  f2cb				   pixelon
   1056  f2cb		       b9 c8 00 	      lda	playfield,y
   1057  f2ce		       1d e1 f2 	      ora	setbyte,x
   1058  f2d1				  -	      ifconst	superchip
   1059  f2d1				  -	      sta	playfield-128,y
   1060  f2d1					      else
   1061  f2d1		       99 c8 00 	      sta	playfield,y
   1062  f2d4					      endif
   1063  f2d4		       60		      rts
   1064  f2d5				   pixeloff
   1065  f2d5		       bd e1 f2 	      lda	setbyte,x
   1066  f2d8		       49 ff		      eor	#$ff
   1067  f2da		       39 c8 00 	      and	playfield,y
   1068  f2dd				  -	      ifconst	superchip
   1069  f2dd				  -	      sta	playfield-128,y
   1070  f2dd					      else
   1071  f2dd		       99 c8 00 	      sta	playfield,y
   1072  f2e0					      endif
   1073  f2e0		       60		      rts
   1074  f2e1
   1075  f2e1				   setbyte
   1076  f2e1					      ifnconst	pfcenter
   1077  f2e1		       80		      .byte.b	$80
   1078  f2e2		       40		      .byte.b	$40
   1079  f2e3		       20		      .byte.b	$20
   1080  f2e4		       10		      .byte.b	$10
   1081  f2e5		       08		      .byte.b	$08
   1082  f2e6		       04		      .byte.b	$04
   1083  f2e7		       02		      .byte.b	$02
   1084  f2e8		       01		      .byte.b	$01
   1085  f2e9					      endif
   1086  f2e9		       01		      .byte.b	$01
   1087  f2ea		       02		      .byte.b	$02
   1088  f2eb		       04		      .byte.b	$04
   1089  f2ec		       08		      .byte.b	$08
   1090  f2ed		       10		      .byte.b	$10
   1091  f2ee		       20		      .byte.b	$20
   1092  f2ef		       40		      .byte.b	$40
   1093  f2f0		       80		      .byte.b	$80
   1094  f2f1		       80		      .byte.b	$80
   1095  f2f2		       40		      .byte.b	$40
   1096  f2f3		       20		      .byte.b	$20
   1097  f2f4		       10		      .byte.b	$10
   1098  f2f5		       08		      .byte.b	$08
   1099  f2f6		       04		      .byte.b	$04
   1100  f2f7		       02		      .byte.b	$02
   1101  f2f8		       01		      .byte.b	$01
   1102  f2f9		       01		      .byte.b	$01
   1103  f2fa		       02		      .byte.b	$02
   1104  f2fb		       04		      .byte.b	$04
   1105  f2fc		       08		      .byte.b	$08
   1106  f2fd		       10		      .byte.b	$10
   1107  f2fe		       20		      .byte.b	$20
   1108  f2ff		       40		      .byte.b	$40
   1109  f300		       80		      .byte.b	$80
   1110  f301							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1111  f301
   1112  f301				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1113  f301		       d0 13		      bne	notleft
   1114  f303							;left
   1115  f303					      ifconst	pfres
   1116  f303		       a2 0c		      ldx	#pfres*4
   1117  f305				  -	      else
   1118  f305				  -	      ldx	#48
   1119  f305					      endif
   1120  f305				   leftloop
   1121  f305		       b5 c7		      lda	playfield-1,x
   1122  f307		       4a		      lsr
   1123  f308
   1124  f308				  -	      ifconst	superchip
   1125  f308				  -	      lda	playfield-2,x
   1126  f308				  -	      rol
   1127  f308				  -	      sta	playfield-130,x
   1128  f308				  -	      lda	playfield-3,x
   1129  f308				  -	      ror
   1130  f308				  -	      sta	playfield-131,x
   1131  f308				  -	      lda	playfield-4,x
   1132  f308				  -	      rol
   1133  f308				  -	      sta	playfield-132,x
   1134  f308				  -	      lda	playfield-1,x
   1135  f308				  -	      ror
   1136  f308				  -	      sta	playfield-129,x
   1137  f308					      else
   1138  f308		       36 c6		      rol	playfield-2,x
   1139  f30a		       76 c5		      ror	playfield-3,x
   1140  f30c		       36 c4		      rol	playfield-4,x
   1141  f30e		       76 c7		      ror	playfield-1,x
   1142  f310					      endif
   1143  f310
   1144  f310		       8a		      txa
   1145  f311		       cb 04		      sbx	#4
   1146  f313		       d0 f0		      bne	leftloop
      0  f315					      RETURN
      1  f315					      ifnconst	bankswitch
      2  f315		       60		      rts
      3  f316				  -	      else
      4  f316				  -	      jmp	BS_return
      5  f316					      endif
   1148  f316
   1149  f316				   notleft
   1150  f316		       4a		      lsr
   1151  f317		       90 13		      bcc	notright
   1152  f319							;right
   1153  f319
   1154  f319					      ifconst	pfres
   1155  f319		       a2 0c		      ldx	#pfres*4
   1156  f31b				  -	      else
   1157  f31b				  -	      ldx	#48
   1158  f31b					      endif
   1159  f31b				   rightloop
   1160  f31b		       b5 c4		      lda	playfield-4,x
   1161  f31d		       4a		      lsr
   1162  f31e				  -	      ifconst	superchip
   1163  f31e				  -	      lda	playfield-3,x
   1164  f31e				  -	      rol
   1165  f31e				  -	      sta	playfield-131,x
   1166  f31e				  -	      lda	playfield-2,x
   1167  f31e				  -	      ror
   1168  f31e				  -	      sta	playfield-130,x
   1169  f31e				  -	      lda	playfield-1,x
   1170  f31e				  -	      rol
   1171  f31e				  -	      sta	playfield-129,x
   1172  f31e				  -	      lda	playfield-4,x
   1173  f31e				  -	      ror
   1174  f31e				  -	      sta	playfield-132,x
   1175  f31e					      else
   1176  f31e		       36 c5		      rol	playfield-3,x
   1177  f320		       76 c6		      ror	playfield-2,x
   1178  f322		       36 c7		      rol	playfield-1,x
   1179  f324		       76 c4		      ror	playfield-4,x
   1180  f326					      endif
   1181  f326		       8a		      txa
   1182  f327		       cb 04		      sbx	#4
   1183  f329		       d0 f0		      bne	rightloop
      0  f32b					      RETURN
      1  f32b					      ifnconst	bankswitch
      2  f32b		       60		      rts
      3  f32c				  -	      else
      4  f32c				  -	      jmp	BS_return
      5  f32c					      endif
   1185  f32c
   1186  f32c				   notright
   1187  f32c		       4a		      lsr
   1188  f32d		       90 49		      bcc	notup
   1189  f32f							;up
   1190  f32f		       4a		      lsr
   1191  f330		       90 02		      bcc	onedecup
   1192  f332		       c6 ef		      dec	playfieldpos
   1193  f334				   onedecup
   1194  f334		       c6 ef		      dec	playfieldpos
   1195  f336		       f0 02		      beq	shiftdown
   1196  f338		       10 3d		      bpl	noshiftdown2
   1197  f33a				   shiftdown
   1198  f33a				  -	      ifconst	pfrowheight
   1199  f33a				  -	      lda	#pfrowheight
   1200  f33a					      else
   1201  f33a				  -	      ifnconst	pfres
   1202  f33a				  -	      lda	#8
   1203  f33a					      else
   1204  f33a		       a9 20		      lda	#(96/pfres)	; try to come close to the real size
   1205  f33c					      endif
   1206  f33c					      endif
   1207  f33c
   1208  f33c		       85 ef		      sta	playfieldpos
   1209  f33e		       a5 cb		      lda	playfield+3
   1210  f340		       85 9f		      sta	temp4
   1211  f342		       a5 ca		      lda	playfield+2
   1212  f344		       85 9e		      sta	temp3
   1213  f346		       a5 c9		      lda	playfield+1
   1214  f348		       85 9d		      sta	temp2
   1215  f34a		       a5 c8		      lda	playfield
   1216  f34c		       85 9c		      sta	temp1
   1217  f34e		       a2 00		      ldx	#0
   1218  f350				   up2
   1219  f350		       b5 cc		      lda	playfield+4,x
   1220  f352				  -	      ifconst	superchip
   1221  f352				  -	      sta	playfield-128,x
   1222  f352				  -	      lda	playfield+5,x
   1223  f352				  -	      sta	playfield-127,x
   1224  f352				  -	      lda	playfield+6,x
   1225  f352				  -	      sta	playfield-126,x
   1226  f352				  -	      lda	playfield+7,x
   1227  f352				  -	      sta	playfield-125,x
   1228  f352					      else
   1229  f352		       95 c8		      sta	playfield,x
   1230  f354		       b5 cd		      lda	playfield+5,x
   1231  f356		       95 c9		      sta	playfield+1,x
   1232  f358		       b5 ce		      lda	playfield+6,x
   1233  f35a		       95 ca		      sta	playfield+2,x
   1234  f35c		       b5 cf		      lda	playfield+7,x
   1235  f35e		       95 cb		      sta	playfield+3,x
   1236  f360					      endif
   1237  f360		       8a		      txa
   1238  f361		       cb fc		      sbx	#252
   1239  f363					      ifconst	pfres
   1240  f363		       e0 08		      cpx	#(pfres-1)*4
   1241  f365				  -	      else
   1242  f365				  -	      cpx	#44
   1243  f365					      endif
   1244  f365		       d0 e9		      bne	up2
   1245  f367
   1246  f367		       a5 9f		      lda	temp4
   1247  f369
   1248  f369				  -	      ifconst	superchip
   1249  f369				  -	      ifconst	pfres
   1250  f369				  -	      sta	playfield+pfres*4-129
   1251  f369				  -	      lda	temp3
   1252  f369				  -	      sta	playfield+pfres*4-130
   1253  f369				  -	      lda	temp2
   1254  f369				  -	      sta	playfield+pfres*4-131
   1255  f369				  -	      lda	temp1
   1256  f369				  -	      sta	playfield+pfres*4-132
   1257  f369				  -	      else
   1258  f369				  -	      sta	playfield+47-128
   1259  f369				  -	      lda	temp3
   1260  f369				  -	      sta	playfield+46-128
   1261  f369				  -	      lda	temp2
   1262  f369				  -	      sta	playfield+45-128
   1263  f369				  -	      lda	temp1
   1264  f369				  -	      sta	playfield+44-128
   1265  f369				  -	      endif
   1266  f369					      else
   1267  f369					      ifconst	pfres
   1268  f369		       85 d3		      sta	playfield+pfres*4-1
   1269  f36b		       a5 9e		      lda	temp3
   1270  f36d		       85 d2		      sta	playfield+pfres*4-2
   1271  f36f		       a5 9d		      lda	temp2
   1272  f371		       85 d1		      sta	playfield+pfres*4-3
   1273  f373		       a5 9c		      lda	temp1
   1274  f375		       85 d0		      sta	playfield+pfres*4-4
   1275  f377				  -	      else
   1276  f377				  -	      sta	playfield+47
   1277  f377				  -	      lda	temp3
   1278  f377				  -	      sta	playfield+46
   1279  f377				  -	      lda	temp2
   1280  f377				  -	      sta	playfield+45
   1281  f377				  -	      lda	temp1
   1282  f377				  -	      sta	playfield+44
   1283  f377					      endif
   1284  f377					      endif
   1285  f377				   noshiftdown2
      0  f377					      RETURN
      1  f377					      ifnconst	bankswitch
      2  f377		       60		      rts
      3  f378				  -	      else
      4  f378				  -	      jmp	BS_return
      5  f378					      endif
   1287  f378
   1288  f378
   1289  f378				   notup
   1290  f378							;down
   1291  f378		       4a		      lsr
   1292  f379		       b0 02		      bcs	oneincup
   1293  f37b		       e6 ef		      inc	playfieldpos
   1294  f37d				   oneincup
   1295  f37d		       e6 ef		      inc	playfieldpos
   1296  f37f		       a5 ef		      lda	playfieldpos
   1297  f381
   1298  f381				  -	      ifconst	pfrowheight
   1299  f381				  -	      cmp	#pfrowheight+1
   1300  f381					      else
   1301  f381				  -	      ifnconst	pfres
   1302  f381				  -	      cmp	#9
   1303  f381					      else
   1304  f381		       c9 21		      cmp	#(96/pfres)+1	; try to come close to the real size
   1305  f383					      endif
   1306  f383					      endif
   1307  f383
   1308  f383		       90 3b		      bcc	noshiftdown
   1309  f385		       a9 01		      lda	#1
   1310  f387		       85 ef		      sta	playfieldpos
   1311  f389
   1312  f389					      ifconst	pfres
   1313  f389		       a5 d3		      lda	playfield+pfres*4-1
   1314  f38b		       85 9f		      sta	temp4
   1315  f38d		       a5 d2		      lda	playfield+pfres*4-2
   1316  f38f		       85 9e		      sta	temp3
   1317  f391		       a5 d1		      lda	playfield+pfres*4-3
   1318  f393		       85 9d		      sta	temp2
   1319  f395		       a5 d0		      lda	playfield+pfres*4-4
   1320  f397				  -	      else
   1321  f397				  -	      lda	playfield+47
   1322  f397				  -	      sta	temp4
   1323  f397				  -	      lda	playfield+46
   1324  f397				  -	      sta	temp3
   1325  f397				  -	      lda	playfield+45
   1326  f397				  -	      sta	temp2
   1327  f397				  -	      lda	playfield+44
   1328  f397					      endif
   1329  f397
   1330  f397		       85 9c		      sta	temp1
   1331  f399
   1332  f399					      ifconst	pfres
   1333  f399		       a2 08		      ldx	#(pfres-1)*4
   1334  f39b				  -	      else
   1335  f39b				  -	      ldx	#44
   1336  f39b					      endif
   1337  f39b				   down2
   1338  f39b		       b5 c7		      lda	playfield-1,x
   1339  f39d				  -	      ifconst	superchip
   1340  f39d				  -	      sta	playfield-125,x
   1341  f39d				  -	      lda	playfield-2,x
   1342  f39d				  -	      sta	playfield-126,x
   1343  f39d				  -	      lda	playfield-3,x
   1344  f39d				  -	      sta	playfield-127,x
   1345  f39d				  -	      lda	playfield-4,x
   1346  f39d				  -	      sta	playfield-128,x
   1347  f39d					      else
   1348  f39d		       95 cb		      sta	playfield+3,x
   1349  f39f		       b5 c6		      lda	playfield-2,x
   1350  f3a1		       95 ca		      sta	playfield+2,x
   1351  f3a3		       b5 c5		      lda	playfield-3,x
   1352  f3a5		       95 c9		      sta	playfield+1,x
   1353  f3a7		       b5 c4		      lda	playfield-4,x
   1354  f3a9		       95 c8		      sta	playfield,x
   1355  f3ab					      endif
   1356  f3ab		       8a		      txa
   1357  f3ac		       cb 04		      sbx	#4
   1358  f3ae		       d0 eb		      bne	down2
   1359  f3b0
   1360  f3b0		       a5 9f		      lda	temp4
   1361  f3b2				  -	      ifconst	superchip
   1362  f3b2				  -	      sta	playfield-125
   1363  f3b2				  -	      lda	temp3
   1364  f3b2				  -	      sta	playfield-126
   1365  f3b2				  -	      lda	temp2
   1366  f3b2				  -	      sta	playfield-127
   1367  f3b2				  -	      lda	temp1
   1368  f3b2				  -	      sta	playfield-128
   1369  f3b2					      else
   1370  f3b2		       85 cb		      sta	playfield+3
   1371  f3b4		       a5 9e		      lda	temp3
   1372  f3b6		       85 ca		      sta	playfield+2
   1373  f3b8		       a5 9d		      lda	temp2
   1374  f3ba		       85 c9		      sta	playfield+1
   1375  f3bc		       a5 9c		      lda	temp1
   1376  f3be		       85 c8		      sta	playfield
   1377  f3c0					      endif
   1378  f3c0				   noshiftdown
      0  f3c0					      RETURN
      1  f3c0					      ifnconst	bankswitch
      2  f3c0		       60		      rts
      3  f3c1				  -	      else
      4  f3c1				  -	      jmp	BS_return
      5  f3c1					      endif
   1380  f3c1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1381  f3c1
   1382  f3c1							;standard routines needed for pretty much all games
   1383  f3c1							; just the random number generator is left - maybe we should remove this asm file altogether?
   1384  f3c1							; repositioning code and score pointer setup moved to overscan
   1385  f3c1							; read switches, joysticks now compiler generated (more efficient)
   1386  f3c1
   1387  f3c1				   randomize
   1388  f3c1		       a5 a2		      lda	rand
   1389  f3c3		       4a		      lsr
   1390  f3c4				  -	      ifconst	rand16
   1391  f3c4				  -	      rol	rand16
   1392  f3c4					      endif
   1393  f3c4		       90 02		      bcc	noeor
   1394  f3c6		       49 b4		      eor	#$B4
   1395  f3c8				   noeor
   1396  f3c8		       85 a2		      sta	rand
   1397  f3ca				  -	      ifconst	rand16
   1398  f3ca				  -	      eor	rand16
   1399  f3ca					      endif
      0  f3ca					      RETURN
      1  f3ca					      ifnconst	bankswitch
      2  f3ca		       60		      rts
      3  f3cb				  -	      else
      4  f3cb				  -	      jmp	BS_return
      5  f3cb					      endif
   1401  f3cb							; Provided under the CC0 license. See the included LICENSE.txt for details.
   1402  f3cb
   1403  f3cb				   drawscreen
   1404  f3cb				  -	      ifconst	debugscore
   1405  f3cb				  -	      ldx	#14
   1406  f3cb				  -	      lda	INTIM	; display # cycles left in the score
   1407  f3cb				  -
   1408  f3cb				  -	      ifconst	mincycles
   1409  f3cb				  -	      lda	mincycles
   1410  f3cb				  -	      cmp	INTIM
   1411  f3cb				  -	      lda	mincycles
   1412  f3cb				  -	      bcc	nochange
   1413  f3cb				  -	      lda	INTIM
   1414  f3cb				  -	      sta	mincycles
   1415  f3cb				  -nochange
   1416  f3cb				  -	      endif
   1417  f3cb				  -
   1418  f3cb				  -			; cmp #$2B
   1419  f3cb				  -			; bcs no_cycles_left
   1420  f3cb				  -	      bmi	cycles_left
   1421  f3cb				  -	      ldx	#64
   1422  f3cb				  -	      eor	#$ff	;make negative
   1423  f3cb				  -cycles_left
   1424  f3cb				  -	      stx	scorecolor
   1425  f3cb				  -	      and	#$7f	; clear sign bit
   1426  f3cb				  -	      tax
   1427  f3cb				  -	      lda	scorebcd,x
   1428  f3cb				  -	      sta	score+2
   1429  f3cb				  -	      lda	scorebcd1,x
   1430  f3cb				  -	      sta	score+1
   1431  f3cb				  -	      jmp	done_debugscore
   1432  f3cb				  -scorebcd
   1433  f3cb				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1434  f3cb				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1435  f3cb				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1436  f3cb				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1437  f3cb				  -scorebcd1
   1438  f3cb				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1439  f3cb				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1440  f3cb				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1441  f3cb				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1442  f3cb				  -done_debugscore
   1443  f3cb					      endif
   1444  f3cb
   1445  f3cb				  -	      ifconst	debugcycles
   1446  f3cb				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1447  f3cb				  -			; cmp #$2B
   1448  f3cb				  -			; BCC overscan
   1449  f3cb				  -	      bmi	overscan
   1450  f3cb				  -	      sta	COLUBK
   1451  f3cb				  -	      bcs	doneoverscan
   1452  f3cb					      endif
   1453  f3cb
   1454  f3cb				   overscan
   1455  f3cb				  -	      ifconst	interlaced
   1456  f3cb				  -	      PHP
   1457  f3cb				  -	      PLA
   1458  f3cb				  -	      EOR	#4	; flip interrupt bit
   1459  f3cb				  -	      PHA
   1460  f3cb				  -	      PLP
   1461  f3cb				  -	      AND	#4	; isolate the interrupt bit
   1462  f3cb				  -	      TAX		; save it for later
   1463  f3cb					      endif
   1464  f3cb
   1465  f3cb				   overscanloop
   1466  f3cb		       ad 84 02 	      lda	INTIM	;wait for sync
   1467  f3ce		       30 fb		      bmi	overscanloop
   1468  f3d0				   doneoverscan
   1469  f3d0
   1470  f3d0							;do VSYNC
   1471  f3d0
   1472  f3d0				  -	      ifconst	interlaced
   1473  f3d0				  -	      CPX	#4
   1474  f3d0				  -	      BNE	oddframevsync
   1475  f3d0					      endif
   1476  f3d0
   1477  f3d0		       a9 02		      lda	#2
   1478  f3d2		       85 02		      sta	WSYNC
   1479  f3d4		       85 00		      sta	VSYNC
   1480  f3d6		       85 02		      STA	WSYNC
   1481  f3d8		       85 02		      STA	WSYNC
   1482  f3da		       4a		      lsr
   1483  f3db		       85 02		      STA	WSYNC
   1484  f3dd		       85 00		      STA	VSYNC
   1485  f3df		       85 01		      sta	VBLANK
   1486  f3e1					      ifnconst	overscan_time
   1487  f3e1		       a9 a5		      lda	#37+128
   1488  f3e3				  -	      else
   1489  f3e3				  -	      lda	#overscan_time+128
   1490  f3e3					      endif
   1491  f3e3		       8d 96 02 	      sta	TIM64T
   1492  f3e6
   1493  f3e6				  -	      ifconst	interlaced
   1494  f3e6				  -	      jmp	postsync
   1495  f3e6				  -
   1496  f3e6				  -oddframevsync
   1497  f3e6				  -	      sta	WSYNC
   1498  f3e6				  -
   1499  f3e6				  -	      LDA	($80,X)	; 11 waste
   1500  f3e6				  -	      LDA	($80,X)	; 11 waste
   1501  f3e6				  -	      LDA	($80,X)	; 11 waste
   1502  f3e6				  -
   1503  f3e6				  -	      lda	#2
   1504  f3e6				  -	      sta	VSYNC
   1505  f3e6				  -	      sta	WSYNC
   1506  f3e6				  -	      sta	WSYNC
   1507  f3e6				  -	      sta	WSYNC
   1508  f3e6				  -
   1509  f3e6				  -	      LDA	($80,X)	; 11 waste
   1510  f3e6				  -	      LDA	($80,X)	; 11 waste
   1511  f3e6				  -	      LDA	($80,X)	; 11 waste
   1512  f3e6				  -
   1513  f3e6				  -	      lda	#0
   1514  f3e6				  -	      sta	VSYNC
   1515  f3e6				  -	      sta	VBLANK
   1516  f3e6				  -	      ifnconst	overscan_time
   1517  f3e6				  -	      lda	#37+128
   1518  f3e6				  -	      else
   1519  f3e6				  -	      lda	#overscan_time+128
   1520  f3e6				  -	      endif
   1521  f3e6				  -	      sta	TIM64T
   1522  f3e6				  -
   1523  f3e6				  -postsync
   1524  f3e6					      endif
   1525  f3e6
   1526  f3e6				  -	      ifconst	legacy
   1527  f3e6				  -	      if	legacy < 100
   1528  f3e6				  -	      ldx	#4
   1529  f3e6				  -adjustloop
   1530  f3e6				  -	      lda	player0x,x
   1531  f3e6				  -	      sec
   1532  f3e6				  -	      sbc	#14	;?
   1533  f3e6				  -	      sta	player0x,x
   1534  f3e6				  -	      dex
   1535  f3e6				  -	      bpl	adjustloop
   1536  f3e6				  -	      endif
   1537  f3e6					      endif
   1538  f3e6				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1539  f3e6				  -	      repeat	($fa-(<*))
   1540  f3e6				  -	      nop
   1541  f3e6				  -	      repend
   1542  f3e6					      endif
   1543  f3e6		       85 02		      sta	WSYNC
   1544  f3e8		       a2 04		      ldx	#4
      0  f3ea					      SLEEP	3
      1  f3ea				   .CYCLES    SET	3
      2  f3ea
      3  f3ea				  -	      IF	.CYCLES < 2
      4  f3ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3ea				  -	      ERR
      6  f3ea					      ENDIF
      7  f3ea
      8  f3ea					      IF	.CYCLES & 1
      9  f3ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3ea		       04 00		      nop	0
     11  f3ec				  -	      ELSE
     12  f3ec				  -	      bit	VSYNC
     13  f3ec					      ENDIF
     14  f3ec				   .CYCLES    SET	.CYCLES - 3
     15  f3ec					      ENDIF
     16  f3ec
     17  f3ec				  -	      REPEAT	.CYCLES / 2
     18  f3ec				  -	      nop
     19  f3ec					      REPEND
   1546  f3ec				   HorPosLoop		; 5
   1547  f3ec		       b5 80		      lda	player0x,X	;+4 9
   1548  f3ee		       38		      sec		;+2 11
   1549  f3ef				   DivideLoop
   1550  f3ef		       e9 0f		      sbc	#15
   1551  f3f1		       b0 fc		      bcs	DivideLoop	;+4 15
   1552  f3f3		       95 9c		      sta	temp1,X	;+4 19
   1553  f3f5		       95 10		      sta	RESP0,X	;+4 23
   1554  f3f7		       85 02		      sta	WSYNC
   1555  f3f9		       ca		      dex
   1556  f3fa		       10 f0		      bpl	HorPosLoop	;+5 5
   1557  f3fc							; 4
   1558  f3fc
   1559  f3fc		       a2 04		      ldx	#4
   1560  f3fe		       b4 9c		      ldy	temp1,X
   1561  f400		       b9 5f f3 	      lda	repostable-256,Y
   1562  f403		       95 20		      sta	HMP0,X	;+14 18
   1563  f405
   1564  f405		       ca		      dex
   1565  f406		       b4 9c		      ldy	temp1,X
   1566  f408		       b9 5f f3 	      lda	repostable-256,Y
   1567  f40b		       95 20		      sta	HMP0,X	;+14 32
   1568  f40d
   1569  f40d		       ca		      dex
   1570  f40e		       b4 9c		      ldy	temp1,X
   1571  f410		       b9 5f f3 	      lda	repostable-256,Y
   1572  f413		       95 20		      sta	HMP0,X	;+14 46
   1573  f415
   1574  f415		       ca		      dex
   1575  f416		       b4 9c		      ldy	temp1,X
   1576  f418		       b9 5f f3 	      lda	repostable-256,Y
   1577  f41b		       95 20		      sta	HMP0,X	;+14 60
   1578  f41d
   1579  f41d		       ca		      dex
   1580  f41e		       b4 9c		      ldy	temp1,X
   1581  f420		       b9 5f f3 	      lda	repostable-256,Y
   1582  f423		       95 20		      sta	HMP0,X	;+14 74
   1583  f425
   1584  f425		       85 02		      sta	WSYNC
   1585  f427
   1586  f427		       85 2a		      sta	HMOVE	;+3 3
   1587  f429
   1588  f429
   1589  f429				  -	      ifconst	legacy
   1590  f429				  -	      if	legacy < 100
   1591  f429				  -	      ldx	#4
   1592  f429				  -adjustloop2
   1593  f429				  -	      lda	player0x,x
   1594  f429				  -	      clc
   1595  f429				  -	      adc	#14	;?
   1596  f429				  -	      sta	player0x,x
   1597  f429				  -	      dex
   1598  f429				  -	      bpl	adjustloop2
   1599  f429				  -	      endif
   1600  f429					      endif
   1601  f429
   1602  f429
   1603  f429
   1604  f429
   1605  f429							;set score pointers
   1606  f429		       a7 95		      lax	score+2
   1607  f42b		       20 5f f4 	      jsr	scorepointerset
   1608  f42e		       84 9b		      sty	scorepointers+5
   1609  f430		       86 98		      stx	scorepointers+2
   1610  f432		       a7 94		      lax	score+1
   1611  f434		       20 5f f4 	      jsr	scorepointerset
   1612  f437		       84 9a		      sty	scorepointers+4
   1613  f439		       86 97		      stx	scorepointers+1
   1614  f43b		       a7 93		      lax	score
   1615  f43d		       20 5f f4 	      jsr	scorepointerset
   1616  f440		       84 99		      sty	scorepointers+3
   1617  f442		       86 96		      stx	scorepointers
   1618  f444
   1619  f444				   vblk
   1620  f444							; run possible vblank bB code
   1621  f444					      ifconst	vblank_bB_code
   1622  f444		       20 dd f6 	      jsr	vblank_bB_code
   1623  f447					      endif
   1624  f447				   vblk2
   1625  f447		       ad 84 02 	      LDA	INTIM
   1626  f44a		       30 fb		      bmi	vblk2
   1627  f44c		       4c 34 f0 	      jmp	kernel
   1628  f44f
   1629  f44f
   1630  f44f		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1631  f458		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1632  f45f				   repostable
   1633  f45f
   1634  f45f				   scorepointerset
   1635  f45f		       29 0f		      and	#$0F
   1636  f461		       0a		      asl
   1637  f462		       0a		      asl
   1638  f463		       0a		      asl
   1639  f464		       69 9c		      adc	#<scoretable
   1640  f466		       a8		      tay
   1641  f467		       8a		      txa
   1642  f468							; and #$F0
   1643  f468							; lsr
   1644  f468		       4b f0		      asr	#$F0
   1645  f46a		       69 9c		      adc	#<scoretable
   1646  f46c		       aa		      tax
   1647  f46d		       60		      rts
   1648  f46e				   game
   1649  f46e				   .L00 		;  set kernel_options pfcolors no_blank_lines background
   1650  f46e
   1651  f46e				   .L01 		;  set romsize 4k
   1652  f46e
   1653  f46e				   .L02 		;  rem set smartbranching on
   1654  f46e
   1655  f46e				   .
   1656  f46e							; 
   1657  f46e
   1658  f46e				   .L03 		;  rem COLUPF=$06 :rem PlayField Gray
   1659  f46e
   1660  f46e				   .L04 		;  scorecolor = $06
   1661  f46e
   1662  f46e		       a9 06		      LDA	#$06
   1663  f470		       85 a3		      STA	scorecolor
   1664  f472				   .L05 		;  AUDV0 = 8
   1665  f472
   1666  f472		       a9 08		      LDA	#8
   1667  f474		       85 19		      STA	AUDV0
   1668  f476				   .L06 		;  player0x = 41
   1669  f476
   1670  f476		       a9 29		      LDA	#41
   1671  f478		       85 80		      STA	player0x
   1672  f47a				   .L07 		;  const pfres = 3
   1673  f47a
   1674  f47a				   .
   1675  f47a							; 
   1676  f47a
   1677  f47a				   .
   1678  f47a							; 
   1679  f47a
   1680  f47a				   .L08 		;  dim _velocity = a
   1681  f47a
   1682  f47a				   .L09 		;  dim _frameCounter = b
   1683  f47a
   1684  f47a				   .L010		;  dim _rng = c
   1685  f47a
   1686  f47a				   .L011		;  dim _scoreTemp = d
   1687  f47a
   1688  f47a				   .L012		;  dim _speed = e
   1689  f47a
   1690  f47a				   .L013		;  dim _checkpointCount = f
   1691  f47a
   1692  f47a				   .
   1693  f47a							; 
   1694  f47a
   1695  f47a				   .L014		;  dim _Bit7_Flip_P1  =  y
   1696  f47a
   1697  f47a				   .
   1698  f47a							; 
   1699  f47a
   1700  f47a				   .
   1701  f47a							; 
   1702  f47a
   1703  f47a				   .
   1704  f47a							; 
   1705  f47a
   1706  f47a				   .
   1707  f47a							; 
   1708  f47a
   1709  f47a				   .
   1710  f47a							; 
   1711  f47a
   1712  f47a				   .
   1713  f47a							; 
   1714  f47a
   1715  f47a				   .
   1716  f47a							; 
   1717  f47a
   1718  f47a				   .
   1719  f47a							; 
   1720  f47a
   1721  f47a				   .
   1722  f47a							; 
   1723  f47a
   1724  f47a				   .__title
   1725  f47a							; __title
   1726  f47a
   1727  f47a				   .L015		;  player0y = 55
   1728  f47a
   1729  f47a		       a9 37		      LDA	#55
   1730  f47c		       85 85		      STA	player0y
   1731  f47e				   .L016		;  player1x = 0
   1732  f47e
   1733  f47e		       a9 00		      LDA	#0
   1734  f480		       85 81		      STA	player1x
   1735  f482				   .L017		;  _speed = 2
   1736  f482
   1737  f482		       a9 02		      LDA	#2
   1738  f484		       85 d8		      STA	_speed
   1739  f486				   .L018		;  score = 0
   1740  f486
   1741  f486		       a9 00		      LDA	#$00
   1742  f488		       85 95		      STA	score+2
   1743  f48a		       a9 00		      LDA	#$00
   1744  f48c		       85 94		      STA	score+1
   1745  f48e		       a9 00		      LDA	#$00
   1746  f490		       85 93		      STA	score
   1747  f492				   .L019		;  _scoreTemp = 0
   1748  f492
   1749  f492		       a9 00		      LDA	#0
   1750  f494		       85 d7		      STA	_scoreTemp
   1751  f496				   .L020		;  _checkpointCount = 0
   1752  f496
   1753  f496		       a9 00		      LDA	#0
   1754  f498		       85 d9		      STA	_checkpointCount
   1755  f49a				   .L021		;  _velocity = 10
   1756  f49a
   1757  f49a		       a9 0a		      LDA	#10
   1758  f49c		       85 d4		      STA	_velocity
   1759  f49e				   .L022		;  gosub __pfidle
   1760  f49e
   1761  f49e		       20 9c f6 	      jsr	.__pfidle
   1762  f4a1
   1763  f4a1				   .L023		;  gosub __draw
   1764  f4a1
   1765  f4a1		       20 3d f5 	      jsr	.__draw
   1766  f4a4
   1767  f4a4				   .L024		;  if !joy0fire  &&  !joy0up then goto __title
   1768  f4a4
   1769  f4a4		       24 0c		      bit	INPT4
   1770  f4a6		       10 0a		      BPL	.skipL024
   1771  f4a8				   .condpart0
   1772  f4a8		       a9 10		      lda	#$10
   1773  f4aa		       2c 80 02 	      bit	SWCHA
   1774  f4ad		       f0 03		      BEQ	.skip0then
   1775  f4af				   .condpart1
   1776  f4af		       4c 7a f4 	      jmp	.__title
   1777  f4b2
   1778  f4b2				   .skip0then
   1779  f4b2				   .skipL024
   1780  f4b2				   .
   1781  f4b2							; 
   1782  f4b2
   1783  f4b2				   .
   1784  f4b2							; 
   1785  f4b2
   1786  f4b2				   .
   1787  f4b2							; 
   1788  f4b2
   1789  f4b2				   .
   1790  f4b2							; 
   1791  f4b2
   1792  f4b2				   .
   1793  f4b2							; 
   1794  f4b2
   1795  f4b2				   .
   1796  f4b2							; 
   1797  f4b2
   1798  f4b2				   .__mainloop
   1799  f4b2							; __mainloop
   1800  f4b2
   1801  f4b2				   .L025		;  _frameCounter = _frameCounter + 1
   1802  f4b2
   1803  f4b2		       e6 d5		      INC	_frameCounter
   1804  f4b4				   .L026		;  if _frameCounter >= 6 then missile0x = missile0x - _speed : score = score + _speed : _scoreTemp = _scoreTemp + _speed : _frameCounter = 0
   1805  f4b4
   1806  f4b4		       a5 d5		      LDA	_frameCounter
   1807  f4b6		       c9 06		      CMP	#6
   1808  f4b8		       90 27		      BCC	.skipL026
   1809  f4ba				   .condpart2
   1810  f4ba		       a5 82		      LDA	missile0x
   1811  f4bc		       38		      SEC
   1812  f4bd		       e5 d8		      SBC	_speed
   1813  f4bf		       85 82		      STA	missile0x
   1814  f4c1		       f8		      SED
   1815  f4c2		       18		      CLC
   1816  f4c3		       a5 95		      LDA	score+2
   1817  f4c5		       65 d8		      ADC	_speed
   1818  f4c7		       85 95		      STA	score+2
   1819  f4c9		       a5 94		      LDA	score+1
   1820  f4cb		       69 00		      ADC	#0
   1821  f4cd		       85 94		      STA	score+1
   1822  f4cf		       a5 93		      LDA	score
   1823  f4d1		       69 00		      ADC	#0
   1824  f4d3		       85 93		      STA	score
   1825  f4d5		       d8		      CLD
   1826  f4d6		       a5 d7		      LDA	_scoreTemp
   1827  f4d8		       18		      CLC
   1828  f4d9		       65 d8		      ADC	_speed
   1829  f4db		       85 d7		      STA	_scoreTemp
   1830  f4dd		       a9 00		      LDA	#0
   1831  f4df		       85 d5		      STA	_frameCounter
   1832  f4e1				   .skipL026
   1833  f4e1				   .L027		;  if missile0x > 200 then missile0x = missile0x + 160
   1834  f4e1
   1835  f4e1		       a9 c8		      LDA	#200
   1836  f4e3		       c5 82		      CMP	missile0x
   1837  f4e5		       b0 07		      BCS	.skipL027
   1838  f4e7				   .condpart3
   1839  f4e7		       a5 82		      LDA	missile0x
   1840  f4e9		       18		      CLC
   1841  f4ea		       69 a0		      ADC	#160
   1842  f4ec		       85 82		      STA	missile0x
   1843  f4ee				   .skipL027
   1844  f4ee				   .L028		;  player1x = player1x - _speed
   1845  f4ee
   1846  f4ee		       a5 81		      LDA	player1x
   1847  f4f0		       38		      SEC
   1848  f4f1		       e5 d8		      SBC	_speed
   1849  f4f3		       85 81		      STA	player1x
   1850  f4f5				   .L029		;  if player1x > 200 then gosub __nextObj
   1851  f4f5
   1852  f4f5		       a9 c8		      LDA	#200
   1853  f4f7		       c5 81		      CMP	player1x
   1854  f4f9		       b0 03		      BCS	.skipL029
   1855  f4fb				   .condpart4
   1856  f4fb		       20 d7 f5 	      jsr	.__nextObj
   1857  f4fe
   1858  f4fe				   .skipL029
   1859  f4fe				   .
   1860  f4fe							; 
   1861  f4fe
   1862  f4fe				   .L030		;  if _rng = 3 then gosub __animBird else gosub __obcactus
   1863  f4fe
   1864  f4fe		       a5 d6		      LDA	_rng
   1865  f500		       c9 03		      CMP	#3
   1866  f502		       d0 06		      BNE	.skipL030
   1867  f504				   .condpart5
   1868  f504		       20 07 f6 	      jsr	.__animBird
   1869  f507		       4c 0d f5 	      jmp	.skipelse0
   1870  f50a				   .skipL030
   1871  f50a		       20 b6 f6 	      jsr	.__obcactus
   1872  f50d
   1873  f50d				   .skipelse0
   1874  f50d				   .
   1875  f50d							; 
   1876  f50d
   1877  f50d				   .
   1878  f50d							; 
   1879  f50d
   1880  f50d				   .
   1881  f50d							; 
   1882  f50d
   1883  f50d				   .
   1884  f50d							; 
   1885  f50d
   1886  f50d				   .
   1887  f50d							; 
   1888  f50d
   1889  f50d				   .
   1890  f50d							; 
   1891  f50d
   1892  f50d				   .L031		;  player0y =	( player0y - _velocity )  + 10
   1893  f50d
   1894  f50d							; complex statement detected
   1895  f50d		       a5 85		      LDA	player0y
   1896  f50f		       38		      SEC
   1897  f510		       e5 d4		      SBC	_velocity
   1898  f512		       18		      CLC
   1899  f513		       69 0a		      ADC	#10
   1900  f515		       85 85		      STA	player0y
   1901  f517				   .L032		;  gosub __physics
   1902  f517
   1903  f517		       20 7d f5 	      jsr	.__physics
   1904  f51a
   1905  f51a				   .L033		;  if joy0down then gosub __physics : gosub __pfduck
   1906  f51a
   1907  f51a		       a9 20		      lda	#$20
   1908  f51c		       2c 80 02 	      bit	SWCHA
   1909  f51f		       d0 06		      BNE	.skipL033
   1910  f521				   .condpart6
   1911  f521		       20 7d f5 	      jsr	.__physics
   1912  f524		       20 a9 f6 	      jsr	.__pfduck
   1913  f527
   1914  f527				   .skipL033
   1915  f527				   .
   1916  f527							; 
   1917  f527
   1918  f527				   .
   1919  f527							; 
   1920  f527
   1921  f527				   .L034		;  if _scoreTemp >= 100 then gosub __checkpoint
   1922  f527
   1923  f527		       a5 d7		      LDA	_scoreTemp
   1924  f529		       c9 64		      CMP	#100
   1925  f52b		       90 03		      BCC	.skipL034
   1926  f52d				   .condpart7
   1927  f52d		       20 17 f6 	      jsr	.__checkpoint
   1928  f530
   1929  f530				   .skipL034
   1930  f530				   .
   1931  f530							; 
   1932  f530
   1933  f530				   .
   1934  f530							; 
   1935  f530
   1936  f530				   .
   1937  f530							; 
   1938  f530
   1939  f530				   .L035		;  if collision(player0,player1) then goto __gameover
   1940  f530
   1941  f530		       24 07		      bit	CXPPMM
   1942  f532		       10 03		      BPL	.skipL035
   1943  f534				   .condpart8
   1944  f534		       4c 3b f6 	      jmp	.__gameover
   1945  f537
   1946  f537				   .skipL035
   1947  f537				   .L036		;  gosub __draw
   1948  f537
   1949  f537		       20 3d f5 	      jsr	.__draw
   1950  f53a
   1951  f53a				   .L037		;  goto __mainloop
   1952  f53a
   1953  f53a		       4c b2 f4 	      jmp	.__mainloop
   1954  f53d
   1955  f53d				   .
   1956  f53d							; 
   1957  f53d
   1958  f53d				   .__draw
   1959  f53d							; __draw
   1960  f53d
   1961  f53d				   .L038		;  if switchbw then gosub __bg_black else gosub __bg_white
   1962  f53d
   1963  f53d		       a9 08		      lda	#8
   1964  f53f		       2c 82 02 	      bit	SWCHB
   1965  f542		       d0 06		      BNE	.skipL038
   1966  f544				   .condpart9
   1967  f544		       20 8b f6 	      jsr	.__bg_black
   1968  f547		       4c 4d f5 	      jmp	.skipelse1
   1969  f54a				   .skipL038
   1970  f54a		       20 7e f6 	      jsr	.__bg_white
   1971  f54d
   1972  f54d				   .skipelse1
   1973  f54d				   .L039		;  if _rng < 3  &&  _Bit7_Flip_P1{7} then REFP1  =  8
   1974  f54d
   1975  f54d		       a5 d6		      LDA	_rng
   1976  f54f		       c9 03		      CMP	#3
   1977  f551		       b0 08		      BCS	.skipL039
   1978  f553				   .condpart10
   1979  f553		       24 ec		      BIT	_Bit7_Flip_P1
   1980  f555		       10 04		      BPL	.skip10then
   1981  f557				   .condpart11
   1982  f557		       a9 08		      LDA	#8
   1983  f559		       85 0c		      STA	REFP1
   1984  f55b				   .skip10then
   1985  f55b				   .skipL039
   1986  f55b				   .L040		;  if _rng <= 1 then NUSIZ1 = $31
   1987  f55b
   1988  f55b		       a9 01		      LDA	#1
   1989  f55d		       c5 d6		      CMP	_rng
   1990  f55f		       90 04		      BCC	.skipL040
   1991  f561				   .condpart12
   1992  f561		       a9 31		      LDA	#$31
   1993  f563		       85 05		      STA	NUSIZ1
   1994  f565				   .skipL040
   1995  f565				   .L041		;  drawscreen
   1996  f565
   1997  f565		       20 cb f3 	      jsr	drawscreen
   1998  f568				   .L042		;  AUDC0 = 0
   1999  f568
   2000  f568		       a9 00		      LDA	#0
   2001  f56a		       85 15		      STA	AUDC0
   2002  f56c				   .L043		;  AUDF0 = 12
   2003  f56c
   2004  f56c		       a9 0c		      LDA	#12
   2005  f56e		       85 17		      STA	AUDF0
   2006  f570				   .L044		;  if switchreset then pop : goto __title
   2007  f570
   2008  f570		       a9 01		      lda	#1
   2009  f572		       2c 82 02 	      bit	SWCHB
   2010  f575		       d0 05		      BNE	.skipL044
   2011  f577				   .condpart13
   2012  f577		       68		      pla
   2013  f578		       68		      pla
   2014  f579		       4c 7a f4 	      jmp	.__title
   2015  f57c
   2016  f57c				   .skipL044
   2017  f57c				   .L045		;  return
   2018  f57c
   2019  f57c		       60		      RTS
   2020  f57d				   .
   2021  f57d							; 
   2022  f57d
   2023  f57d				   .
   2024  f57d							; 
   2025  f57d
   2026  f57d				   .
   2027  f57d							; 
   2028  f57d
   2029  f57d				   .
   2030  f57d							; 
   2031  f57d
   2032  f57d				   .
   2033  f57d							; 
   2034  f57d
   2035  f57d				   .
   2036  f57d							; 
   2037  f57d
   2038  f57d				   .L046		;  rem **********
   2039  f57d
   2040  f57d				   .L047		;  rem Reused suff
   2041  f57d
   2042  f57d				   .L048		;  rem **********
   2043  f57d
   2044  f57d				   .
   2045  f57d							; 
   2046  f57d
   2047  f57d				   .__physics
   2048  f57d							; __physics
   2049  f57d
   2050  f57d				   .L049		;  if player0y  >=  55 then gosub __touchingGnd else gosub __gravity
   2051  f57d
   2052  f57d		       a5 85		      LDA	player0y
   2053  f57f		       c9 37		      CMP	#55
   2054  f581		       90 06		      BCC	.skipL049
   2055  f583				   .condpart14
   2056  f583		       20 8d f5 	      jsr	.__touchingGnd
   2057  f586		       4c 8c f5 	      jmp	.skipelse2
   2058  f589				   .skipL049
   2059  f589		       20 c5 f5 	      jsr	.__gravity
   2060  f58c
   2061  f58c				   .skipelse2
   2062  f58c				   .L050		;  return
   2063  f58c
   2064  f58c		       60		      RTS
   2065  f58d				   .
   2066  f58d							; 
   2067  f58d
   2068  f58d				   .__touchingGnd
   2069  f58d							; __touchingGnd
   2070  f58d
   2071  f58d				   .L051		;  player0y = 55
   2072  f58d
   2073  f58d		       a9 37		      LDA	#55
   2074  f58f		       85 85		      STA	player0y
   2075  f591				   .L052		;  _velocity = 10
   2076  f591
   2077  f591		       a9 0a		      LDA	#10
   2078  f593		       85 d4		      STA	_velocity
   2079  f595				   .L053		;  if _frameCounter = 1 then gosub __input
   2080  f595
   2081  f595		       a5 d5		      LDA	_frameCounter
   2082  f597		       c9 01		      CMP	#1
   2083  f599		       d0 03		      BNE	.skipL053
   2084  f59b				   .condpart15
   2085  f59b		       20 ae f5 	      jsr	.__input
   2086  f59e
   2087  f59e				   .skipL053
   2088  f59e				   .L054		;  if _frameCounter < 3 then gosub __pf2 else gosub __pf3
   2089  f59e
   2090  f59e		       a5 d5		      LDA	_frameCounter
   2091  f5a0		       c9 03		      CMP	#3
   2092  f5a2		       b0 06		      BCS	.skipL054
   2093  f5a4				   .condpart16
   2094  f5a4		       20 9c f6 	      jsr	.__pf2
   2095  f5a7		       4c ad f5 	      jmp	.skipelse3
   2096  f5aa				   .skipL054
   2097  f5aa		       20 9c f6 	      jsr	.__pf3
   2098  f5ad
   2099  f5ad				   .skipelse3
   2100  f5ad				   .L055		;  return
   2101  f5ad
   2102  f5ad		       60		      RTS
   2103  f5ae				   .
   2104  f5ae							; 
   2105  f5ae
   2106  f5ae				   .__input
   2107  f5ae							; __input
   2108  f5ae
   2109  f5ae				   .L056		;  if joy0fire  ||  joy0up then AUDC0 = 12 : _velocity = 13
   2110  f5ae
   2111  f5ae		       24 0c		      bit	INPT4
   2112  f5b0		       30 03		      BMI	.skipL056
   2113  f5b2				   .condpart17
   2114  f5b2		       4c bc f5 	      jmp	.condpart18
   2115  f5b5				   .skipL056
   2116  f5b5		       a9 10		      lda	#$10
   2117  f5b7		       2c 80 02 	      bit	SWCHA
   2118  f5ba		       d0 08		      BNE	.skip2OR
   2119  f5bc				   .condpart18
   2120  f5bc		       a9 0c		      LDA	#12
   2121  f5be		       85 15		      STA	AUDC0
   2122  f5c0		       a9 0d		      LDA	#13
   2123  f5c2		       85 d4		      STA	_velocity
   2124  f5c4				   .skip2OR
   2125  f5c4				   .L057		;  return
   2126  f5c4
   2127  f5c4		       60		      RTS
   2128  f5c5				   .
   2129  f5c5							; 
   2130  f5c5
   2131  f5c5				   .__gravity
   2132  f5c5							; __gravity
   2133  f5c5
   2134  f5c5				   .L058		;  if _velocity > 0  &&  _frameCounter = 4 then _velocity = _velocity - 1
   2135  f5c5
   2136  f5c5		       a9 00		      LDA	#0
   2137  f5c7		       c5 d4		      CMP	_velocity
   2138  f5c9		       b0 08		      BCS	.skipL058
   2139  f5cb				   .condpart19
   2140  f5cb		       a5 d5		      LDA	_frameCounter
   2141  f5cd		       c9 04		      CMP	#4
   2142  f5cf		       d0 02		      BNE	.skip19then
   2143  f5d1				   .condpart20
   2144  f5d1		       c6 d4		      DEC	_velocity
   2145  f5d3				   .skip19then
   2146  f5d3				   .skipL058
   2147  f5d3				   .L059		;  gosub __pfidle
   2148  f5d3
   2149  f5d3		       20 9c f6 	      jsr	.__pfidle
   2150  f5d6
   2151  f5d6				   .L060		;  return
   2152  f5d6
   2153  f5d6		       60		      RTS
   2154  f5d7				   .
   2155  f5d7							; 
   2156  f5d7
   2157  f5d7				   .__nextObj
   2158  f5d7							; __nextObj
   2159  f5d7
   2160  f5d7				   .L061		;  _rng =  ( rand & 3 ) 
   2161  f5d7
   2162  f5d7							; complex statement detected
   2163  f5d7		       20 c1 f3 	      jsr	randomize
   2164  f5da		       29 03		      AND	#3
   2165  f5dc		       85 d6		      STA	_rng
   2166  f5de				   .L062		;  player1x = 157 +  ( _rng ) 
   2167  f5de
   2168  f5de							; complex statement detected
   2169  f5de		       a9 9d		      LDA	#157
   2170  f5e0		       18		      CLC
   2171  f5e1		       65 d6		      ADC	_rng
   2172  f5e3		       85 81		      STA	player1x
   2173  f5e5				   .L063		;  if _rng = 3 then player1y = 46 else player1y = 55
   2174  f5e5
   2175  f5e5		       a5 d6		      LDA	_rng
   2176  f5e7		       c9 03		      CMP	#3
   2177  f5e9		       d0 07		      BNE	.skipL063
   2178  f5eb				   .condpart21
   2179  f5eb		       a9 2e		      LDA	#46
   2180  f5ed		       85 86		      STA	player1y
   2181  f5ef		       4c f6 f5 	      jmp	.skipelse4
   2182  f5f2				   .skipL063
   2183  f5f2		       a9 37		      LDA	#55
   2184  f5f4		       85 86		      STA	player1y
   2185  f5f6				   .skipelse4
   2186  f5f6				   .L064		;  _Bit7_Flip_P1{7}  =  !_Bit7_Flip_P1{7}
   2187  f5f6
   2188  f5f6		       a5 ec		      LDA	_Bit7_Flip_P1
   2189  f5f8		       29 80		      AND	#128
   2190  f5fa		       08		      PHP
   2191  f5fb		       a5 ec		      LDA	_Bit7_Flip_P1
   2192  f5fd		       29 7f		      AND	#127
   2193  f5ff		       28		      PLP
   2194  f600		       d0 02		      .byte.b	$D0, $02
   2195  f602		       09 80		      ORA	#128
   2196  f604		       85 ec		      STA	_Bit7_Flip_P1
   2197  f606				   .L065		;  return
   2198  f606
   2199  f606		       60		      RTS
   2200  f607				   .
   2201  f607							; 
   2202  f607
   2203  f607				   .__animBird
   2204  f607							; __animBird
   2205  f607
   2206  f607				   .L066		;  if _frameCounter < 3 then gosub __obbird1 else gosub __obbird2
   2207  f607
   2208  f607		       a5 d5		      LDA	_frameCounter
   2209  f609		       c9 03		      CMP	#3
   2210  f60b		       b0 06		      BCS	.skipL066
   2211  f60d				   .condpart22
   2212  f60d		       20 c3 f6 	      jsr	.__obbird1
   2213  f610		       4c 16 f6 	      jmp	.skipelse5
   2214  f613				   .skipL066
   2215  f613		       20 d0 f6 	      jsr	.__obbird2
   2216  f616
   2217  f616				   .skipelse5
   2218  f616				   .L067		;  return
   2219  f616
   2220  f616		       60		      RTS
   2221  f617				   .
   2222  f617							; 
   2223  f617
   2224  f617				   .__checkpoint
   2225  f617							; __checkpoint
   2226  f617
   2227  f617				   .L068		;  AUDF0 = 5
   2228  f617
   2229  f617		       a9 05		      LDA	#5
   2230  f619		       85 17		      STA	AUDF0
   2231  f61b				   .L069		;  AUDC0 = 12
   2232  f61b
   2233  f61b		       a9 0c		      LDA	#12
   2234  f61d		       85 15		      STA	AUDC0
   2235  f61f				   .L070		;  if _checkpointCount >= 3  &&  _speed < 4 then _speed = _speed + 1 : _checkpointCount = 0 else _scoreTemp = 0 : _checkpointCount = _checkpointCount + 1
   2236  f61f
   2237  f61f		       a5 d9		      LDA	_checkpointCount
   2238  f621		       c9 03		      CMP	#3
   2239  f623		       90 0f		      BCC	.skipL070
   2240  f625				   .condpart23
   2241  f625		       a5 d8		      LDA	_speed
   2242  f627		       c9 04		      CMP	#4
   2243  f629		       b0 09		      BCS	.skip23then
   2244  f62b				   .condpart24
   2245  f62b		       e6 d8		      INC	_speed
   2246  f62d		       a9 00		      LDA	#0
   2247  f62f		       85 d9		      STA	_checkpointCount
   2248  f631		       4c 3a f6 	      jmp	.skipelse6
   2249  f634				   .skip23then
   2250  f634				   .skipL070
   2251  f634		       a9 00		      LDA	#0
   2252  f636		       85 d7		      STA	_scoreTemp
   2253  f638		       e6 d9		      INC	_checkpointCount
   2254  f63a				   .skipelse6
   2255  f63a				   .L071		;  return
   2256  f63a
   2257  f63a		       60		      RTS
   2258  f63b				   .
   2259  f63b							; 
   2260  f63b
   2261  f63b				   .
   2262  f63b							; 
   2263  f63b
   2264  f63b				   .
   2265  f63b							; 
   2266  f63b
   2267  f63b				   .
   2268  f63b							; 
   2269  f63b
   2270  f63b				   .
   2271  f63b							; 
   2272  f63b
   2273  f63b				   .__gameover
   2274  f63b							; __gameover
   2275  f63b
   2276  f63b				   .L072		;  AUDC0 = 7
   2277  f63b
   2278  f63b		       a9 07		      LDA	#7
   2279  f63d		       85 15		      STA	AUDC0
   2280  f63f				   .L073		;  gosub __pfdead
   2281  f63f
   2282  f63f		       20 9c f6 	      jsr	.__pfdead
   2283  f642
   2284  f642				   .
   2285  f642							; 
   2286  f642
   2287  f642				   .__gameover1
   2288  f642							; __gameover1
   2289  f642
   2290  f642				   .L074		;  gosub __draw
   2291  f642
   2292  f642		       20 3d f5 	      jsr	.__draw
   2293  f645
   2294  f645				   .L075		;  if joy0fire  ||  joy0up then goto __gameover1
   2295  f645
   2296  f645		       24 0c		      bit	INPT4
   2297  f647		       30 03		      BMI	.skipL075
   2298  f649				   .condpart25
   2299  f649		       4c 53 f6 	      jmp	.condpart26
   2300  f64c				   .skipL075
   2301  f64c		       a9 10		      lda	#$10
   2302  f64e		       2c 80 02 	      bit	SWCHA
   2303  f651		       d0 03		      BNE	.skip5OR
   2304  f653				   .condpart26
   2305  f653		       4c 42 f6 	      jmp	.__gameover1
   2306  f656
   2307  f656				   .skip5OR
   2308  f656				   .
   2309  f656							; 
   2310  f656
   2311  f656				   .__gameover2
   2312  f656							; __gameover2
   2313  f656
   2314  f656				   .L076		;  gosub __draw
   2315  f656
   2316  f656		       20 3d f5 	      jsr	.__draw
   2317  f659
   2318  f659				   .L077		;  if !joy0fire  &&  !joy0up then goto __gameover2
   2319  f659
   2320  f659		       24 0c		      bit	INPT4
   2321  f65b		       10 0a		      BPL	.skipL077
   2322  f65d				   .condpart27
   2323  f65d		       a9 10		      lda	#$10
   2324  f65f		       2c 80 02 	      bit	SWCHA
   2325  f662		       f0 03		      BEQ	.skip27then
   2326  f664				   .condpart28
   2327  f664		       4c 56 f6 	      jmp	.__gameover2
   2328  f667
   2329  f667				   .skip27then
   2330  f667				   .skipL077
   2331  f667				   .
   2332  f667							; 
   2333  f667
   2334  f667				   .__gameover3
   2335  f667							; __gameover3
   2336  f667
   2337  f667				   .L078		;  gosub __draw
   2338  f667
   2339  f667		       20 3d f5 	      jsr	.__draw
   2340  f66a
   2341  f66a				   .L079		;  if joy0fire  ||  joy0up then goto __gameover3
   2342  f66a
   2343  f66a		       24 0c		      bit	INPT4
   2344  f66c		       30 03		      BMI	.skipL079
   2345  f66e				   .condpart29
   2346  f66e		       4c 78 f6 	      jmp	.condpart30
   2347  f671				   .skipL079
   2348  f671		       a9 10		      lda	#$10
   2349  f673		       2c 80 02 	      bit	SWCHA
   2350  f676		       d0 03		      BNE	.skip7OR
   2351  f678				   .condpart30
   2352  f678		       4c 67 f6 	      jmp	.__gameover3
   2353  f67b
   2354  f67b				   .skip7OR
   2355  f67b				   .L080		;  goto __title
   2356  f67b
   2357  f67b		       4c 7a f4 	      jmp	.__title
   2358  f67e
   2359  f67e				   .
   2360  f67e							; 
   2361  f67e
   2362  f67e				   .__bg_white
   2363  f67e							; __bg_white
   2364  f67e
   2365  f67e				   .L081		;  rem COLUBK=$0F
   2366  f67e
   2367  f67e				   .
   2368  f67e							; 
   2369  f67e
   2370  f67e				   .L082		;  pfcolors:
   2371  f67e
   2372  f67e		       a9 0f		      lda	# $0F
   2373  f680		       85 08		      sta	COLUPF
   2374  f682					      ifconst	pfres
   2375  f682		       a9 f6		      lda	#>(pfcolorlabel13-132+pfres*pfwidth)
   2376  f684				  -	      else
   2377  f684				  -	      lda	#>(pfcolorlabel13-84)
   2378  f684					      endif
   2379  f684		       85 f1		      sta	pfcolortable+1
   2380  f686					      ifconst	pfres
   2381  f686		       a9 79		      lda	#<(pfcolorlabel13-132+pfres*pfwidth)
   2382  f688				  -	      else
   2383  f688				  -	      lda	#<(pfcolorlabel13-84)
   2384  f688					      endif
   2385  f688		       85 f0		      sta	pfcolortable
   2386  f68a				   .
   2387  f68a							; 
   2388  f68a
   2389  f68a				   .L083		;  return
   2390  f68a
   2391  f68a		       60		      RTS
   2392  f68b				   .
   2393  f68b							; 
   2394  f68b
   2395  f68b				   .__bg_black
   2396  f68b							; __bg_black
   2397  f68b
   2398  f68b				   .L084		;  rem COLUBK=$00
   2399  f68b
   2400  f68b				   .L085		;  ENAM0 = 2
   2401  f68b
   2402  f68b		       a9 02		      LDA	#2
   2403  f68d		       85 1d		      STA	ENAM0
   2404  f68f				   .
   2405  f68f							; 
   2406  f68f
   2407  f68f				   .L086		;  pfcolors:
   2408  f68f
   2409  f68f		       a9 00		      lda	# $00
   2410  f691		       85 08		      sta	COLUPF
   2411  f693					      ifconst	pfres
   2412  f693		       a9 f6		      lda	#>(pfcolorlabel13-131+pfres*pfwidth)
   2413  f695				  -	      else
   2414  f695				  -	      lda	#>(pfcolorlabel13-83)
   2415  f695					      endif
   2416  f695		       85 f1		      sta	pfcolortable+1
   2417  f697					      ifconst	pfres
   2418  f697		       a9 7a		      lda	#<(pfcolorlabel13-131+pfres*pfwidth)
   2419  f699				  -	      else
   2420  f699				  -	      lda	#<(pfcolorlabel13-83)
   2421  f699					      endif
   2422  f699		       85 f0		      sta	pfcolortable
   2423  f69b				   .
   2424  f69b							; 
   2425  f69b
   2426  f69b				   .L087		;  return
   2427  f69b
   2428  f69b		       60		      RTS
   2429  f69c				   .
   2430  f69c							; 
   2431  f69c
   2432  f69c				   .
   2433  f69c							; 
   2434  f69c
   2435  f69c				   .L088		;  rem *********************
   2436  f69c
   2437  f69c				   .L089		;  rem Area reserved for GFX
   2438  f69c
   2439  f69c				   .L090		;  rem *********************
   2440  f69c
   2441  f69c				   .
   2442  f69c							; 
   2443  f69c
   2444  f69c				   .__pf2
   2445  f69c							; __pf2
   2446  f69c
   2447  f69c				   .__pf3
   2448  f69c							; __pf3
   2449  f69c
   2450  f69c				   .__pfdead
   2451  f69c							; __pfdead
   2452  f69c
   2453  f69c				   .__pfidle
   2454  f69c							; __pfidle
   2455  f69c
   2456  f69c				   .
   2457  f69c							; 
   2458  f69c
   2459  f69c				   .L091		;  player0:
   2460  f69c
   2461  f69c		       a2 1d		      LDX	#<playerL091_0
   2462  f69e		       86 8a		      STX	player0pointerlo
   2463  f6a0		       a9 f7		      LDA	#>playerL091_0
   2464  f6a2		       85 8b		      STA	player0pointerhi
   2465  f6a4		       a9 0c		      LDA	#12
   2466  f6a6		       85 8e		      STA	player0height
   2467  f6a8				   .L092		;  return
   2468  f6a8
   2469  f6a8		       60		      RTS
   2470  f6a9				   .
   2471  f6a9							; 
   2472  f6a9
   2473  f6a9				   .
   2474  f6a9							; 
   2475  f6a9
   2476  f6a9				   .
   2477  f6a9							; 
   2478  f6a9
   2479  f6a9				   .
   2480  f6a9							; 
   2481  f6a9
   2482  f6a9				   .
   2483  f6a9							; 
   2484  f6a9
   2485  f6a9				   .
   2486  f6a9							; 
   2487  f6a9
   2488  f6a9				   .
   2489  f6a9							; 
   2490  f6a9
   2491  f6a9				   .
   2492  f6a9							; 
   2493  f6a9
   2494  f6a9				   .
   2495  f6a9							; 
   2496  f6a9
   2497  f6a9				   .
   2498  f6a9							; 
   2499  f6a9
   2500  f6a9				   .
   2501  f6a9							; 
   2502  f6a9
   2503  f6a9				   .
   2504  f6a9							; 
   2505  f6a9
   2506  f6a9				   .
   2507  f6a9							; 
   2508  f6a9
   2509  f6a9				   .
   2510  f6a9							; 
   2511  f6a9
   2512  f6a9				   .
   2513  f6a9							; 
   2514  f6a9
   2515  f6a9				   .
   2516  f6a9							; 
   2517  f6a9
   2518  f6a9				   .
   2519  f6a9							; 
   2520  f6a9
   2521  f6a9				   .
   2522  f6a9							; 
   2523  f6a9
   2524  f6a9				   .
   2525  f6a9							; 
   2526  f6a9
   2527  f6a9				   .
   2528  f6a9							; 
   2529  f6a9
   2530  f6a9				   .
   2531  f6a9							; 
   2532  f6a9
   2533  f6a9				   .
   2534  f6a9							; 
   2535  f6a9
   2536  f6a9				   .
   2537  f6a9							; 
   2538  f6a9
   2539  f6a9				   .
   2540  f6a9							; 
   2541  f6a9
   2542  f6a9				   .
   2543  f6a9							; 
   2544  f6a9
   2545  f6a9				   .
   2546  f6a9							; 
   2547  f6a9
   2548  f6a9				   .
   2549  f6a9							; 
   2550  f6a9
   2551  f6a9				   .
   2552  f6a9							; 
   2553  f6a9
   2554  f6a9				   .
   2555  f6a9							; 
   2556  f6a9
   2557  f6a9				   .
   2558  f6a9							; 
   2559  f6a9
   2560  f6a9				   .
   2561  f6a9							; 
   2562  f6a9
   2563  f6a9				   .
   2564  f6a9							; 
   2565  f6a9
   2566  f6a9				   .
   2567  f6a9							; 
   2568  f6a9
   2569  f6a9				   .
   2570  f6a9							; 
   2571  f6a9
   2572  f6a9				   .
   2573  f6a9							; 
   2574  f6a9
   2575  f6a9				   .
   2576  f6a9							; 
   2577  f6a9
   2578  f6a9				   .
   2579  f6a9							; 
   2580  f6a9
   2581  f6a9				   .
   2582  f6a9							; 
   2583  f6a9
   2584  f6a9				   .
   2585  f6a9							; 
   2586  f6a9
   2587  f6a9				   .
   2588  f6a9							; 
   2589  f6a9
   2590  f6a9				   .
   2591  f6a9							; 
   2592  f6a9
   2593  f6a9				   .
   2594  f6a9							; 
   2595  f6a9
   2596  f6a9				   .
   2597  f6a9							; 
   2598  f6a9
   2599  f6a9				   .
   2600  f6a9							; 
   2601  f6a9
   2602  f6a9				   .
   2603  f6a9							; 
   2604  f6a9
   2605  f6a9				   .
   2606  f6a9							; 
   2607  f6a9
   2608  f6a9				   .
   2609  f6a9							; 
   2610  f6a9
   2611  f6a9				   .
   2612  f6a9							; 
   2613  f6a9
   2614  f6a9				   .
   2615  f6a9							; 
   2616  f6a9
   2617  f6a9				   .
   2618  f6a9							; 
   2619  f6a9
   2620  f6a9				   .
   2621  f6a9							; 
   2622  f6a9
   2623  f6a9				   .
   2624  f6a9							; 
   2625  f6a9
   2626  f6a9				   .
   2627  f6a9							; 
   2628  f6a9
   2629  f6a9				   .
   2630  f6a9							; 
   2631  f6a9
   2632  f6a9				   .
   2633  f6a9							; 
   2634  f6a9
   2635  f6a9				   .
   2636  f6a9							; 
   2637  f6a9
   2638  f6a9				   .
   2639  f6a9							; 
   2640  f6a9
   2641  f6a9				   .
   2642  f6a9							; 
   2643  f6a9
   2644  f6a9				   .
   2645  f6a9							; 
   2646  f6a9
   2647  f6a9				   .
   2648  f6a9							; 
   2649  f6a9
   2650  f6a9				   .
   2651  f6a9							; 
   2652  f6a9
   2653  f6a9				   .
   2654  f6a9							; 
   2655  f6a9
   2656  f6a9				   .
   2657  f6a9							; 
   2658  f6a9
   2659  f6a9				   .__pfduck
   2660  f6a9							; __pfduck
   2661  f6a9
   2662  f6a9				   .L093		;  player0:
   2663  f6a9
   2664  f6a9		       a2 2a		      LDX	#<playerL093_0
   2665  f6ab		       86 8a		      STX	player0pointerlo
   2666  f6ad		       a9 f7		      LDA	#>playerL093_0
   2667  f6af		       85 8b		      STA	player0pointerhi
   2668  f6b1		       a9 07		      LDA	#7
   2669  f6b3		       85 8e		      STA	player0height
   2670  f6b5				   .L094		;  return
   2671  f6b5
   2672  f6b5		       60		      RTS
   2673  f6b6				   .
   2674  f6b6							; 
   2675  f6b6
   2676  f6b6				   .__obcactus
   2677  f6b6							; __obcactus
   2678  f6b6
   2679  f6b6				   .L095		;  player1:
   2680  f6b6
   2681  f6b6		       a2 32		      LDX	#<playerL095_1
   2682  f6b8		       86 8c		      STX	player1pointerlo
   2683  f6ba		       a9 f7		      LDA	#>playerL095_1
   2684  f6bc		       85 8d		      STA	player1pointerhi
   2685  f6be		       a9 0c		      LDA	#12
   2686  f6c0		       85 8f		      STA	player1height
   2687  f6c2				   .L096		;  return
   2688  f6c2
   2689  f6c2		       60		      RTS
   2690  f6c3				   .
   2691  f6c3							; 
   2692  f6c3
   2693  f6c3				   .__obbird1
   2694  f6c3							; __obbird1
   2695  f6c3
   2696  f6c3				   .L097		;  player1:
   2697  f6c3
   2698  f6c3		       a2 3f		      LDX	#<playerL097_1
   2699  f6c5		       86 8c		      STX	player1pointerlo
   2700  f6c7		       a9 f7		      LDA	#>playerL097_1
   2701  f6c9		       85 8d		      STA	player1pointerhi
   2702  f6cb		       a9 09		      LDA	#9
   2703  f6cd		       85 8f		      STA	player1height
   2704  f6cf				   .L098		;  return
   2705  f6cf
   2706  f6cf		       60		      RTS
   2707  f6d0				   .
   2708  f6d0							; 
   2709  f6d0
   2710  f6d0				   .__obbird2
   2711  f6d0							; __obbird2
   2712  f6d0
   2713  f6d0				   .L099		;  player1:
   2714  f6d0
   2715  f6d0		       a2 49		      LDX	#<playerL099_1
   2716  f6d2		       86 8c		      STX	player1pointerlo
   2717  f6d4		       a9 f7		      LDA	#>playerL099_1
   2718  f6d6		       85 8d		      STA	player1pointerhi
   2719  f6d8		       a9 0a		      LDA	#10
   2720  f6da		       85 8f		      STA	player1height
   2721  f6dc				   .L0100		;  return
   2722  f6dc
   2723  f6dc		       60		      RTS
   2724  f6dd				   .
   2725  f6dd							; 
   2726  f6dd
   2727  f6dd				   .
   2728  f6dd							; 
   2729  f6dd
   2730  f6dd				   .
   2731  f6dd							; 
   2732  f6dd
   2733  f6dd				   .
   2734  f6dd							; 
   2735  f6dd
   2736  f6dd				   .
   2737  f6dd							; 
   2738  f6dd
   2739  f6dd				   .
   2740  f6dd							; 
   2741  f6dd
   2742  f6dd				   .
   2743  f6dd							; 
   2744  f6dd
   2745  f6dd				   .
   2746  f6dd							; 
   2747  f6dd
   2748  f6dd				   .
   2749  f6dd							; 
   2750  f6dd
   2751  f6dd				   .
   2752  f6dd							; 
   2753  f6dd
   2754  f6dd				   .
   2755  f6dd							; 
   2756  f6dd
   2757  f6dd				   .
   2758  f6dd							; 
   2759  f6dd
   2760  f6dd				   .
   2761  f6dd							; 
   2762  f6dd
   2763  f6dd				   .
   2764  f6dd							; 
   2765  f6dd
   2766  f6dd				   .
   2767  f6dd							; 
   2768  f6dd
   2769  f6dd				   .
   2770  f6dd							; 
   2771  f6dd
   2772  f6dd				   .
   2773  f6dd							; 
   2774  f6dd
   2775  f6dd				   .
   2776  f6dd							; 
   2777  f6dd
   2778  f6dd				   .
   2779  f6dd							; 
   2780  f6dd
   2781  f6dd				   .
   2782  f6dd							; 
   2783  f6dd
   2784  f6dd				   .
   2785  f6dd							; 
   2786  f6dd
   2787  f6dd				   .
   2788  f6dd							; 
   2789  f6dd
   2790  f6dd				   .
   2791  f6dd							; 
   2792  f6dd
   2793  f6dd				   .
   2794  f6dd							; 
   2795  f6dd
   2796  f6dd				   .
   2797  f6dd							; 
   2798  f6dd
   2799  f6dd				   .
   2800  f6dd							; 
   2801  f6dd
   2802  f6dd				   .
   2803  f6dd							; 
   2804  f6dd
   2805  f6dd				   .
   2806  f6dd							; 
   2807  f6dd
   2808  f6dd				   .
   2809  f6dd							; 
   2810  f6dd
   2811  f6dd				   .
   2812  f6dd							; 
   2813  f6dd
   2814  f6dd				   .
   2815  f6dd							; 
   2816  f6dd
   2817  f6dd				   .
   2818  f6dd							; 
   2819  f6dd
   2820  f6dd				   .L0101		;  vblank
   2821  f6dd
   2822  f6dd				   vblank_bB_code
   2823  f6dd				   .L0102		;  asm
   2824  f6dd
   2825  f6dd		       85 2b		      sta	HMCLR
   2826  f6df
   2827  f6df		       85 02		      sta	WSYNC
   2828  f6e1
   2829  f6e1		       a9 ff		      lda	#$ff
   2830  f6e3
   2831  f6e3		       85 22		      sta	HMM0
   2832  f6e5
   2833  f6e5		       a9 c0		      lda	#$c0
   2834  f6e7
   2835  f6e7		       85 02		      sta	WSYNC
   2836  f6e9
   2837  f6e9		       85 2a		      sta	HMOVE
   2838  f6eb
      0  f6eb					      sleep	5
      1  f6eb				   .CYCLES    SET	5
      2  f6eb
      3  f6eb				  -	      IF	.CYCLES < 2
      4  f6eb				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f6eb				  -	      ERR
      6  f6eb					      ENDIF
      7  f6eb
      8  f6eb					      IF	.CYCLES & 1
      9  f6eb					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f6eb		       04 00		      nop	0
     11  f6ed				  -	      ELSE
     12  f6ed				  -	      bit	VSYNC
     13  f6ed					      ENDIF
     14  f6ed				   .CYCLES    SET	.CYCLES - 3
     15  f6ed					      ENDIF
     16  f6ed
     17  f6ed					      REPEAT	.CYCLES / 2
     18  f6ed		       ea		      nop
     19  f6ee					      REPEND
   2840  f6ee
   2841  f6ee		       85 22		      sta	HMM0
   2842  f6f0
   2843  f6f0				   .L0103		;  return
   2844  f6f0
   2845  f6f0		       60		      RTS
   2846  f6f1				   .
   2847  f6f1							; 
   2848  f6f1
   2849  f6f1				   .L0104		;  
   2850  f6f1					      ifconst	pfres
   2851  f6f1				  -	      if	(<*) > (254-pfres*pfwidth)
   2852  f6f1				  -	      align	256
   2853  f6f1					      endif
   2854  f6f1				  -	      if	(<*) < (136-pfres*pfwidth)
   2855  f6f1				  -	      repeat	((136-pfres*pfwidth)-(<*))
   2856  f6f1				  -	      .byte	0
   2857  f6f1				  -	      repend
   2858  f6f1					      endif
   2859  f6f1				  -	      else
   2860  f6f1				  -	      if	(<*) > 206
   2861  f6f1				  -	      align	256
   2862  f6f1				  -	      endif
   2863  f6f1				  -	      if	(<*) < 88
   2864  f6f1				  -	      repeat	(88-(<*))
   2865  f6f1				  -	      .byte	0
   2866  f6f1				  -	      repend
   2867  f6f1				  -	      endif
   2868  f6f1					      endif
   2869  f6f1				   pfcolorlabel13
   2870  f6f1		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2871  f6f5		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2872  f6f9		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2873  f6fd		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2874  f701		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2875  f705		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2876  f709		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2877  f70d		       06 06 00 00	      .byte.b	$06, $06,0,0
   2878  f711		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2879  f715		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2880  f719		       0f 00 00 00	      .byte.b	$0F, $00,0,0
   2881  f71d				  -	      if	(<*) > (<(*+12))
   2882  f71d				  -	      repeat	($100-<*)
   2883  f71d				  -	      .byte	0
   2884  f71d				  -	      repend
   2885  f71d					      endif
   2886  f71d				   playerL091_0
   2887  f71d		       28		      .byte.b	%00101000
   2888  f71e		       28		      .byte.b	%00101000
   2889  f71f		       28		      .byte.b	%00101000
   2890  f720		       78		      .byte.b	%01111000
   2891  f721		       fa		      .byte.b	%11111010
   2892  f722		       fe		      .byte.b	%11111110
   2893  f723		       b8		      .byte.b	%10111000
   2894  f724		       98		      .byte.b	%10011000
   2895  f725		       0e		      .byte.b	%00001110
   2896  f726		       08		      .byte.b	%00001000
   2897  f727		       0f		      .byte.b	%00001111
   2898  f728		       0b		      .byte.b	%00001011
   2899  f729		       06		      .byte.b	%00000110
   2900  f72a				  -	      if	(<*) > (<(*+7))
   2901  f72a				  -	      repeat	($100-<*)
   2902  f72a				  -	      .byte	0
   2903  f72a				  -	      repend
   2904  f72a					      endif
   2905  f72a				   playerL093_0
   2906  f72a		       a0		      .byte.b	%10100000
   2907  f72b		       a8		      .byte.b	%10101000
   2908  f72c		       fe		      .byte.b	%11111110
   2909  f72d		       f8		      .byte.b	%11111000
   2910  f72e		       ff		      .byte.b	%11111111
   2911  f72f		       bf		      .byte.b	%10111111
   2912  f730		       8b		      .byte.b	%10001011
   2913  f731		       06		      .byte.b	%00000110
   2914  f732				  -	      if	(<*) > (<(*+12))
   2915  f732				  -	      repeat	($100-<*)
   2916  f732				  -	      .byte	0
   2917  f732				  -	      repend
   2918  f732					      endif
   2919  f732				   playerL095_1
   2920  f732		       38		      .byte.b	%00111000
   2921  f733		       38		      .byte.b	%00111000
   2922  f734		       38		      .byte.b	%00111000
   2923  f735		       3e		      .byte.b	%00111110
   2924  f736		       3f		      .byte.b	%00111111
   2925  f737		       3b		      .byte.b	%00111011
   2926  f738		       fb		      .byte.b	%11111011
   2927  f739		       bb		      .byte.b	%10111011
   2928  f73a		       bb		      .byte.b	%10111011
   2929  f73b		       bb		      .byte.b	%10111011
   2930  f73c		       b8		      .byte.b	%10111000
   2931  f73d		       38		      .byte.b	%00111000
   2932  f73e		       10		      .byte.b	%00010000
   2933  f73f				  -	      if	(<*) > (<(*+9))
   2934  f73f				  -	      repeat	($100-<*)
   2935  f73f				  -	      .byte	0
   2936  f73f				  -	      repend
   2937  f73f					      endif
   2938  f73f				   playerL097_1
   2939  f73f		       10		      .byte.b	%00010000
   2940  f740		       18		      .byte.b	%00011000
   2941  f741		       1c		      .byte.b	%00011100
   2942  f742		       1f		      .byte.b	%00011111
   2943  f743		       1e		      .byte.b	%00011110
   2944  f744		       1f		      .byte.b	%00011111
   2945  f745		       3c		      .byte.b	%00111100
   2946  f746		       f0		      .byte.b	%11110000
   2947  f747		       60		      .byte.b	%01100000
   2948  f748		       20		      .byte.b	%00100000
   2949  f749				  -	      if	(<*) > (<(*+10))
   2950  f749				  -	      repeat	($100-<*)
   2951  f749				  -	      .byte	0
   2952  f749				  -	      repend
   2953  f749					      endif
   2954  f749				   playerL099_1
   2955  f749		       00		      .byte.b	%00000000
   2956  f74a		       00		      .byte.b	%00000000
   2957  f74b		       00		      .byte.b	%00000000
   2958  f74c		       00		      .byte.b	%00000000
   2959  f74d		       00		      .byte.b	%00000000
   2960  f74e		       1f		      .byte.b	%00011111
   2961  f74f		       3e		      .byte.b	%00111110
   2962  f750		       ff		      .byte.b	%11111111
   2963  f751		       6e		      .byte.b	%01101110
   2964  f752		       2c		      .byte.b	%00101100
   2965  f753		       08		      .byte.b	%00001000
   2966  f754					      if	ECHOFIRST
      2120 bytes of ROM space left
   2967  f754					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   2968  f754					      endif
   2969  f754		       00 01	   ECHOFIRST  =	1
   2970  f754
   2971  f754
   2972  f754
   2973  f754							; Provided under the CC0 license. See the included LICENSE.txt for details.
   2974  f754
   2975  f754							; feel free to modify the score graphics - just keep each digit 8 high
   2976  f754							; and keep the conditional compilation stuff intact
   2977  f754				  -	      ifconst	ROM2k
   2978  f754				  -	      ORG	$F7AC-8
   2979  f754					      else
   2980  f754				  -	      ifconst	bankswitch
   2981  f754				  -	      if	bankswitch == 8
   2982  f754				  -	      ORG	$2F94-bscode_length
   2983  f754				  -	      RORG	$FF94-bscode_length
   2984  f754				  -	      endif
   2985  f754				  -	      if	bankswitch == 16
   2986  f754				  -	      ORG	$4F94-bscode_length
   2987  f754				  -	      RORG	$FF94-bscode_length
   2988  f754				  -	      endif
   2989  f754				  -	      if	bankswitch == 32
   2990  f754				  -	      ORG	$8F94-bscode_length
   2991  f754				  -	      RORG	$FF94-bscode_length
   2992  f754				  -	      endif
   2993  f754				  -	      if	bankswitch == 64
   2994  f754				  -	      ORG	$10F80-bscode_length
   2995  f754				  -	      RORG	$1FF80-bscode_length
   2996  f754				  -	      endif
   2997  f754					      else
   2998  ff9c					      ORG	$FF9C
   2999  ff9c					      endif
   3000  ff9c					      endif
   3001  ff9c
   3002  ff9c							; font equates
   3003  ff9c		       00 01	   .21stcentury =	1
   3004  ff9c		       00 02	   alarmclock =	2
   3005  ff9c		       00 03	   handwritten =	3
   3006  ff9c		       00 04	   interrupted =	4
   3007  ff9c		       00 05	   retroputer =	5
   3008  ff9c		       00 06	   whimsey    =	6
   3009  ff9c		       00 07	   tiny       =	7
   3010  ff9c		       00 08	   hex	      =	8
   3011  ff9c
   3012  ff9c				  -	      ifconst	font
   3013  ff9c				  -	      if	font == hex
   3014  ff9c				  -	      ORG	. - 48
   3015  ff9c				  -	      endif
   3016  ff9c					      endif
   3017  ff9c
   3018  ff9c				   scoretable
   3019  ff9c
   3020  ff9c				  -	      ifconst	font
   3021  ff9c				  -	      if	font == .21stcentury
   3022  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3023  ff9c				  -	      endif
   3024  ff9c				  -	      if	font == alarmclock
   3025  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3026  ff9c				  -	      endif
   3027  ff9c				  -	      if	font == handwritten
   3028  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3029  ff9c				  -	      endif
   3030  ff9c				  -	      if	font == interrupted
   3031  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3032  ff9c				  -	      endif
   3033  ff9c				  -	      if	font == retroputer
   3034  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3035  ff9c				  -	      endif
   3036  ff9c				  -	      if	font == whimsey
   3037  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3038  ff9c				  -	      endif
   3039  ff9c				  -	      if	font == tiny
   3040  ff9c				  -	      include	"score_graphics.asm.tiny"
   3041  ff9c				  -	      endif
   3042  ff9c				  -	      if	font == hex
   3043  ff9c				  -	      include	"score_graphics.asm.hex"
   3044  ff9c				  -	      endif
   3045  ff9c					      else		; default font
   3046  ff9c
   3047  ff9c		       3c		      .byte.b	%00111100
   3048  ff9d		       66		      .byte.b	%01100110
   3049  ff9e		       66		      .byte.b	%01100110
   3050  ff9f		       66		      .byte.b	%01100110
   3051  ffa0		       66		      .byte.b	%01100110
   3052  ffa1		       66		      .byte.b	%01100110
   3053  ffa2		       66		      .byte.b	%01100110
   3054  ffa3		       3c		      .byte.b	%00111100
   3055  ffa4
   3056  ffa4		       7e		      .byte.b	%01111110
   3057  ffa5		       18		      .byte.b	%00011000
   3058  ffa6		       18		      .byte.b	%00011000
   3059  ffa7		       18		      .byte.b	%00011000
   3060  ffa8		       18		      .byte.b	%00011000
   3061  ffa9		       38		      .byte.b	%00111000
   3062  ffaa		       18		      .byte.b	%00011000
   3063  ffab		       08		      .byte.b	%00001000
   3064  ffac
   3065  ffac		       7e		      .byte.b	%01111110
   3066  ffad		       60		      .byte.b	%01100000
   3067  ffae		       60		      .byte.b	%01100000
   3068  ffaf		       3c		      .byte.b	%00111100
   3069  ffb0		       06		      .byte.b	%00000110
   3070  ffb1		       06		      .byte.b	%00000110
   3071  ffb2		       46		      .byte.b	%01000110
   3072  ffb3		       3c		      .byte.b	%00111100
   3073  ffb4
   3074  ffb4		       3c		      .byte.b	%00111100
   3075  ffb5		       46		      .byte.b	%01000110
   3076  ffb6		       06		      .byte.b	%00000110
   3077  ffb7		       06		      .byte.b	%00000110
   3078  ffb8		       1c		      .byte.b	%00011100
   3079  ffb9		       06		      .byte.b	%00000110
   3080  ffba		       46		      .byte.b	%01000110
   3081  ffbb		       3c		      .byte.b	%00111100
   3082  ffbc
   3083  ffbc		       0c		      .byte.b	%00001100
   3084  ffbd		       0c		      .byte.b	%00001100
   3085  ffbe		       7e		      .byte.b	%01111110
   3086  ffbf		       4c		      .byte.b	%01001100
   3087  ffc0		       4c		      .byte.b	%01001100
   3088  ffc1		       2c		      .byte.b	%00101100
   3089  ffc2		       1c		      .byte.b	%00011100
   3090  ffc3		       0c		      .byte.b	%00001100
   3091  ffc4
   3092  ffc4		       3c		      .byte.b	%00111100
   3093  ffc5		       46		      .byte.b	%01000110
   3094  ffc6		       06		      .byte.b	%00000110
   3095  ffc7		       06		      .byte.b	%00000110
   3096  ffc8		       3c		      .byte.b	%00111100
   3097  ffc9		       60		      .byte.b	%01100000
   3098  ffca		       60		      .byte.b	%01100000
   3099  ffcb		       7e		      .byte.b	%01111110
   3100  ffcc
   3101  ffcc		       3c		      .byte.b	%00111100
   3102  ffcd		       66		      .byte.b	%01100110
   3103  ffce		       66		      .byte.b	%01100110
   3104  ffcf		       66		      .byte.b	%01100110
   3105  ffd0		       7c		      .byte.b	%01111100
   3106  ffd1		       60		      .byte.b	%01100000
   3107  ffd2		       62		      .byte.b	%01100010
   3108  ffd3		       3c		      .byte.b	%00111100
   3109  ffd4
   3110  ffd4		       30		      .byte.b	%00110000
   3111  ffd5		       30		      .byte.b	%00110000
   3112  ffd6		       30		      .byte.b	%00110000
   3113  ffd7		       18		      .byte.b	%00011000
   3114  ffd8		       0c		      .byte.b	%00001100
   3115  ffd9		       06		      .byte.b	%00000110
   3116  ffda		       42		      .byte.b	%01000010
   3117  ffdb		       3e		      .byte.b	%00111110
   3118  ffdc
   3119  ffdc		       3c		      .byte.b	%00111100
   3120  ffdd		       66		      .byte.b	%01100110
   3121  ffde		       66		      .byte.b	%01100110
   3122  ffdf		       66		      .byte.b	%01100110
   3123  ffe0		       3c		      .byte.b	%00111100
   3124  ffe1		       66		      .byte.b	%01100110
   3125  ffe2		       66		      .byte.b	%01100110
   3126  ffe3		       3c		      .byte.b	%00111100
   3127  ffe4
   3128  ffe4		       3c		      .byte.b	%00111100
   3129  ffe5		       46		      .byte.b	%01000110
   3130  ffe6		       06		      .byte.b	%00000110
   3131  ffe7		       3e		      .byte.b	%00111110
   3132  ffe8		       66		      .byte.b	%01100110
   3133  ffe9		       66		      .byte.b	%01100110
   3134  ffea		       66		      .byte.b	%01100110
   3135  ffeb		       3c		      .byte.b	%00111100
   3136  ffec
   3137  ffec					      ifnconst	DPC_kernel_options
   3138  ffec
   3139  ffec		       00		      .byte.b	%00000000
   3140  ffed		       00		      .byte.b	%00000000
   3141  ffee		       00		      .byte.b	%00000000
   3142  ffef		       00		      .byte.b	%00000000
   3143  fff0		       00		      .byte.b	%00000000
   3144  fff1		       00		      .byte.b	%00000000
   3145  fff2		       00		      .byte.b	%00000000
   3146  fff3		       00		      .byte.b	%00000000
   3147  fff4
   3148  fff4					      endif
   3149  fff4
   3150  fff4					      endif
   3151  fff4
   3152  fff4				  -	      ifconst	ROM2k
   3153  fff4				  -	      ORG	$F7FC
   3154  fff4					      else
   3155  fff4				  -	      ifconst	bankswitch
   3156  fff4				  -	      if	bankswitch == 8
   3157  fff4				  -	      ORG	$2FF4-bscode_length
   3158  fff4				  -	      RORG	$FFF4-bscode_length
   3159  fff4				  -	      endif
   3160  fff4				  -	      if	bankswitch == 16
   3161  fff4				  -	      ORG	$4FF4-bscode_length
   3162  fff4				  -	      RORG	$FFF4-bscode_length
   3163  fff4				  -	      endif
   3164  fff4				  -	      if	bankswitch == 32
   3165  fff4				  -	      ORG	$8FF4-bscode_length
   3166  fff4				  -	      RORG	$FFF4-bscode_length
   3167  fff4				  -	      endif
   3168  fff4				  -	      if	bankswitch == 64
   3169  fff4				  -	      ORG	$10FE0-bscode_length
   3170  fff4				  -	      RORG	$1FFE0-bscode_length
   3171  fff4				  -	      endif
   3172  fff4					      else
   3173  fffc					      ORG	$FFFC
   3174  fffc					      endif
   3175  fffc					      endif
   3176  fffc							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3177  fffc
   3178  fffc				  -	      ifconst	bankswitch
   3179  fffc				  -	      if	bankswitch == 8
   3180  fffc				  -	      ORG	$2FFC
   3181  fffc				  -	      RORG	$FFFC
   3182  fffc				  -	      endif
   3183  fffc				  -	      if	bankswitch == 16
   3184  fffc				  -	      ORG	$4FFC
   3185  fffc				  -	      RORG	$FFFC
   3186  fffc				  -	      endif
   3187  fffc				  -	      if	bankswitch == 32
   3188  fffc				  -	      ORG	$8FFC
   3189  fffc				  -	      RORG	$FFFC
   3190  fffc				  -	      endif
   3191  fffc				  -	      if	bankswitch == 64
   3192  fffc				  -	      ORG	$10FF0
   3193  fffc				  -	      RORG	$1FFF0
   3194  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3195  fffc				  -	      ORG	$10FF8
   3196  fffc				  -	      RORG	$1FFF8
   3197  fffc				  -	      ifconst	superchip
   3198  fffc				  -	      .byte	"E","F","S","C"
   3199  fffc				  -	      else
   3200  fffc				  -	      .byte	"E","F","E","F"
   3201  fffc				  -	      endif
   3202  fffc				  -	      ORG	$10FFC
   3203  fffc				  -	      RORG	$1FFFC
   3204  fffc				  -	      endif
   3205  fffc					      else
   3206  fffc				  -	      ifconst	ROM2k
   3207  fffc				  -	      ORG	$F7FC
   3208  fffc					      else
   3209  fffc					      ORG	$FFFC
   3210  fffc					      endif
   3211  fffc					      endif
   3212  fffc		       00 f0		      .word.w	(start & $ffff)
   3213  fffe		       00 f0		      .word.w	(start & $ffff)
